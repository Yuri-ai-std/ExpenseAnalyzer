import json
import os
import sqlite3
from datetime import date
from datetime import date as _date
from datetime import datetime
from functools import partial
from io import BytesIO
from pathlib import Path
from types import SimpleNamespace
from typing import Any, Dict, Tuple, cast

import altair as alt
import pandas as pd
import streamlit as st

from db import (
    _limits_path_for_db,
    add_expense,
    ensure_db,
    ensure_limits_file,
    get_db_path,
    get_expenses_df,
    list_categories,
)

# CSV/–∞—É–¥–∏—Ç –¥–ª—è –ª–∏–º–∏—Ç–æ–≤
from limits_tools import (
    append_audit_row,
    audit_to_csv_bytes,
    audit_to_json_bytes,
    csv_bytes_to_limits,
    get_audit,
    limits_to_csv_bytes,
)
from messages import t
from utils import (
    db_path_for,
    limits_path_for,
    load_monthly_limits,
    month_key,
    save_monthly_limits,
)

# –û–±—Ö–æ–¥ —Å—Ç–∞—Ä—ã—Ö type-stubs streamlit –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ width="stretch"
st_any = cast(Any, st)

# --- aliases for tests (test_limits_io.py expects underscored names)
_limits_to_csv_bytes = limits_to_csv_bytes

# ---- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ----
st.session_state.setdefault("current_user", "default")


def current_user() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ session_state."""
    return st.session_state["current_user"]


ACTIVE_DB_PATH = db_path_for(current_user())  # data/default_expenses.db
ACTIVE_LIMITS_PATH = limits_path_for(current_user())  # data/default/budget_limits.json
DATA_DIR = Path("data")
BASE_CATEGORIES = [
    "entertainment",
    "food",
    "groceries",
    "other",
    "transport",
    "utilities",
]

# –¥–µ–ª–∞–µ–º –ø—É—Ç–∏ –≤–∏–¥–∏–º—ã–º–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π —á–µ—Ä–µ–∑ session_state
st.session_state["ACTIVE_DB_PATH"] = ACTIVE_DB_PATH
st.session_state["ACTIVE_LIMITS_PATH"] = str(ACTIVE_LIMITS_PATH)

# ---- flash-toast from previous run ----
_flash = st.session_state.pop("_flash", None)
if _flash:
    # _flash: tuple[str, str|None] -> (message, icon)
    msg, icon = (_flash + (None,))[:2]
    st.toast(msg, icon=icon)


# ---- Active user & paths (single source of truth) ----


def _parse_limits_csv(data):
    """–ü–∞—Ä—Å–∏–Ω–≥ CSV ‚Üí dict; –ø—Ä–∏–Ω–∏–º–∞–µ—Ç bytes, str –∏–ª–∏ io.BytesIO."""
    # io.BytesIO –∏–ª–∏ –ª—é–±–æ–π –æ–±—ä–µ–∫—Ç-—Ñ–∞–π–ª–æ–ø–æ–¥–æ–±–Ω—ã–π
    if hasattr(data, "read"):
        data = data.read()
    # —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ bytes
    elif isinstance(data, str):
        data = data.encode("utf-8")
    # –¥–∞–ª–µ–µ —Ç–æ—á–Ω–æ bytes
    return csv_bytes_to_limits(data)


def get_active_user() -> str:
    """–ò–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ session_state (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'default')."""
    return st.session_state.setdefault("current_user", "default")


def get_active_paths():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (db_path, limits_path) –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ."""
    user = get_active_user()
    return db_path_for(user), limits_path_for(user)


_db, _limits = get_active_paths()
st.caption(f"DB: {_db} ‚Äî Limits: {_limits.name}")


def export_df_to_excel_button(df: pd.DataFrame, filename: str = "expenses.xlsx"):
    if df.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–≤–∏–∂–æ–∫
    engine = None
    try:
        import xlsxwriter  # noqa: F401

        engine = "xlsxwriter"
    except ImportError:
        try:
            import openpyxl  # noqa: F401

            engine = "openpyxl"
        except ImportError:
            st.error(
                "–î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–∞–∫–µ—Ç–æ–≤: "
                "`pip install XlsxWriter` –∏–ª–∏ `pip install openpyxl`."
            )
            return

    buf = BytesIO()
    with pd.ExcelWriter(buf, engine=engine) as writer:
        df.to_excel(writer, index=False, sheet_name="Expenses")

    st.download_button(
        label="‚¨áÔ∏è Download Excel",
        data=buf.getvalue(),
        file_name=filename,
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )


def prepare_df_for_view(
    df: pd.DataFrame,
    *,
    remove_dups: bool = True,
    newest_first: bool = True,
) -> pd.DataFrame:
    """–û—á–∏—â–∞–µ—Ç –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/–º–µ—Ç—Ä–∏–∫."""
    d = df.copy()
    if remove_dups:
        d = d.drop_duplicates(
            subset=["date", "category", "amount", "description"],
            keep="last",
        )
    d["date"] = pd.to_datetime(d["date"], errors="coerce")
    d = d.sort_values("date", ascending=not newest_first).reset_index(drop=True)
    return d


def _normalize_limits_json(obj: dict) -> dict[str, dict[str, float]]:
    """
    –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ö–æ–¥ –∫ —Ñ–æ—Ä–º–∞—Ç—É:
      {"YYYY-MM": {"food": 200.0, "transport": 50.0, ...}, ...}
    –ë—Ä–æ—Å–∞–µ–º ValueError –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.
    """
    if not isinstance(obj, dict):
        raise ValueError("Root must be an object")
    out: dict[str, dict[str, float]] = {}
    for mk, limits in obj.items():
        if not isinstance(mk, str) or len(mk) != 7 or mk[4] != "-":
            raise ValueError(f"Invalid month key: {mk!r}")
        if not isinstance(limits, dict):
            raise ValueError(f"Month {mk} must map to an object of category->limit")
        inner: dict[str, float] = {}
        for cat, val in limits.items():
            if not isinstance(cat, str) or not cat.strip():
                continue
            try:
                f = float(val)
            except Exception:
                continue
            if f >= 0:
                inner[cat.strip()] = f
        out[mk] = inner
    return out


def _mdonth_key(date_value):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ YYYY-MM –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Å—è—á–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
    """
    return date_value.strftime("%Y-%m")


def _collect_limits_for_month(mk: str, categories: list[str]) -> dict[str, float]:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–æ–ª–µ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ st.session_state."""
    out: dict[str, float] = {}
    for cat in categories:
        raw = st.session_state.get(f"limit_{mk}_{cat}")
        try:
            out[cat] = float(raw) if raw is not None else 0.0
        except Exception:
            out[cat] = 0.0
    return out


def _collect_limits_from_form(prefix: str) -> Dict[str, float]:
    """
    –°—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ st.session_state[prefix + <category>] –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {category: float}.
    –ù–∏–∫–∞–∫–∏—Ö –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º–µ.
    """
    out: Dict[str, float] = {}
    plen = len(prefix)
    for k, v in st.session_state.items():
        if isinstance(k, str) and k.startswith(prefix):
            cat = k[plen:]
            try:
                out[cat] = float(v) if v not in ("", None) else 0.0
            except Exception:
                # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ/–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
                pass
    return out


# ---- –¢–∞–±–ª–∏—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è) ----
def _col_labels(lang: str) -> dict[str, str]:
    return {
        "id": t("col.id", lang, default="id"),
        "date": t("col.date", lang, default="Date"),
        "category": t("col.category", lang, default="Category"),
        "amount": t("col.amount", lang, default="Amount"),
        "description": t("col.description", lang, default="Description"),
    }


def render_table(
    df, cols, lang: str, *, labels: dict[str, str] | None = None, **st_kwargs
):
    df_disp = df.loc[:, cols]
    if labels is not None:
        df_disp = _localize_category_column(df_disp, labels)
    df_disp = df_disp.rename(columns=_col_labels(lang))
    st.dataframe(df_disp, **st_kwargs)


def render_recent_expenses_table(
    db_path, n: int = 10, *, show_title: bool = False, lang: str = "en"
) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ n –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ë–î.
    –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞–∫ –≤–µ–∑–¥–µ: –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É, –¥—É–±–ª–∏–∫–∞—Ç—ã —É–±–∏—Ä–∞–µ–º.
    """
    if show_title:
        st.subheader(t("recent_expenses", lang, default="Recent expenses"))

    raw_df = get_expenses_df(db_path=db_path)
    df = prepare_df_for_view(raw_df, remove_dups=True, newest_first=True)

    # —Ç–∞–∫ –∫–∞–∫ newest_first=True, –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å–≤–µ—Ä—Ö—É => –±–µ—Ä—ë–º .head(n)
    df_recent = df.head(n)

    # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
    cols = ["id", "date", "category", "amount", "description"]
    render_table(
        df_recent,
        cols=cols,
        lang=lang,
        hide_index=True,
        width="stretch",
        height=360,
        labels=cat_labels,
    )


# ===== –õ–û–ì –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê =====
print(f"\nüîÑ Streamlit –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")


# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====
@st.cache_data(ttl=10, show_spinner=False)
def load_df(
    start: str | None = None, end: str | None = None, *, _ver: int = 0
) -> pd.DataFrame:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ DataFrame.
    –ü–∞—Ä–∞–º–µ—Ç—Ä _ver –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞."""
    db_path = st.session_state.get("ACTIVE_DB_PATH", "data/default_expenses.db")
    df = get_expenses_df(db_path=db_path, start_date=start, end_date=end)
    # ‚Üì –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–æ–Ω–æ–∫
    expected = ["date", "category", "amount", "description"]
    for col in expected:
        if col not in df.columns:
            df[col] = pd.NA
    df["date"] = pd.to_datetime(df["date"], errors="coerce")
    df["amount"] = pd.to_numeric(df["amount"], errors="coerce")
    return df.dropna(subset=["date", "amount"])


@st.cache_data(ttl=120)
def get_categories(
    db_path: str = "expenses.db", ver: int = 0
) -> Tuple[list[str], float]:
    """
    –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î (distinct), –∫—ç—à–∏—Ä—É–µ–º –Ω–∞ 2 –º–∏–Ω.
    –ö—ç—à –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ¬´–ø—Ä–∏–≤—è–∑–∞–Ω¬ª –∫:
      - –ø—É—Ç–∏ –∫ –ë–î (db_path),
      - –≤–µ—Ä—Å–∏–∏ –¥–∞–Ω–Ω—ã—Ö (ver),
    –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ë–î (mtime).
    """
    try:
        db_mtime = os.path.getmtime(db_path)

        with sqlite3.connect(db_path) as conn:
            rows = conn.execute("SELECT DISTINCT category FROM expenses").fetchall()
            cats = [r[0] for r in rows if r and r[0]]

        return cats, db_mtime
    except Exception:
        return [], 0.0


def categories_ui(lang: str) -> tuple[list[str], dict[str, str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      - cats: —Å–ø–∏—Å–æ–∫ –¢–ï–•–ö–õ–Æ–ß–ï–ô (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏)
      - labels: —Å–ª–æ–≤–∞—Ä—å {–∫–ª—é—á -> –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å}
    """
    db_path = str(st.session_state.get("ACTIVE_DB_PATH", "data/default_expenses.db"))

    # 1) –¥–æ—Å—Ç–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î (–ø–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã get_categories)
    try:
        got = get_categories(
            db_path=db_path
        )  # –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å list[...] –ò–õ–ò (list[...], mtime)
        db_cats = got[0] if isinstance(got, tuple) else got
    except Exception:
        db_cats = []

    # 2) UNION –±–∞–∑–æ–≤—ã—Ö –∏ –ë–î
    all_cats = set(BASE_CATEGORIES) | {str(c).strip() for c in db_cats if c}

    # 3) –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è (–∫–ª—é—á–∏ –≤ lower(), —á—Ç–æ–±—ã 'VISA' —Å–æ–≤–ø–∞–¥–∞–ª–æ —Å 'visa' –≤ messages)
    def tr(key: str) -> str:
        return t(f"categories.{key.lower()}", lang, default=key)

    labels = {c: tr(c) for c in all_cats}

    # 4) —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏
    cats_sorted = sorted(all_cats, key=lambda c: labels[c].lower())
    return list(cats_sorted), labels


# ---- —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ----
st.session_state.setdefault("lang", "en")
lang = st.session_state["lang"]

# —á—Ç–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
limits = load_monthly_limits(user=current_user())

# ...–∏–∑–º–µ–Ω–∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å limits –Ω–∞ —Ñ–æ—Ä–º–µ...

# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
save_monthly_limits(limits, user=current_user())


def _fetch_categories() -> list[str]:
    # 1) –µ—Å–ª–∏ –µ—Å—Ç—å list_categories –≤ db.py ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ
    try:
        from db import (
            list_categories as _list_categories,
        )  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è

        cats = _list_categories()
        if cats:
            return cats
    except Exception:
        pass
    # 2) –∏–Ω–∞—á–µ —Å–æ–±–µ—Ä—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
    try:
        db_path = st.session_state.get("ACTIVE_DB_PATH", "data/default_expenses.db")
        df = get_expenses_df(db_path=db_path)
        if "category" in df.columns and not df.empty:
            return sorted(map(str, df["category"].dropna().unique().tolist()))
    except Exception:
        pass
    # 3) –¥–µ—Ñ–æ–ª—Ç
    return ["food", "transport", "health", "entertainment", "other"]


# ===== Add Expense: helpers =====


def add_form_keys(user: str | None = None) -> dict[str, str]:
    sfx = user or st.session_state.get("current_user", "default")
    return {
        "mode": f"add_cat_mode_{sfx}",
        "choose": f"add_cat_choose_{sfx}",
        "new": f"add_cat_new_{sfx}",
        "date": f"add_date_{sfx}",
        "amount": f"add_amount_{sfx}",
        "note": f"add_note_{sfx}",
        "reset": f"add_form_reset_{sfx}",  # —Ñ–ª–∞–≥ —Å–±—Ä–æ—Å–∞
    }


# ===== –í–µ—Ä—Å–∏—è –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∞) =====


def get_data_version() -> int:
    """–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–µ–π."""
    return st.session_state.setdefault("data_version", 0)


def bump_data_version() -> None:
    """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –≤–µ—Ä—Å–∏–∏ –¥–∞–Ω–Ω—ã—Ö ‚Äî –≤—Å–µ –∫—ç—à–∏—Ä—É–µ–º—ã–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –Ω–æ–≤—ã–π _ver."""
    st.session_state["data_version"] = get_data_version() + 1


# ---- –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–±—Ä–æ—Å (—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Ñ–ª–∞–∂–æ–∫!) ----
def request_form_reset(keys: dict[str, str]) -> None:
    st.session_state[keys["reset"]] = True


# ---- –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–±—Ä–æ—Å (—Ä–µ–∞–ª—å–Ω–æ —á–∏—Å—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏—è) ----


def apply_form_reset(keys: dict[str, str]) -> None:
    ss = st.session_state
    if ss.pop(keys["reset"], False):
        # –ù–ï —Ç—Ä–æ–≥–∞–µ–º —Ä–µ–∂–∏–º:
        # ss[keys["mode"]] –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        ss[keys["choose"]] = None
        ss[keys["new"]] = ""
        ss[keys["amount"]] = 0.0
        ss[keys["note"]] = ""
        ss[keys["date"]] = ss.get(keys["date"], _date.today())


def render_add_expense_page(lang: str) -> None:
    ss = st.session_state
    user = current_user()  # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keys = add_form_keys(user)  # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏ —Ñ–æ—Ä–º—ã
    apply_form_reset(keys)  # —Å–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


def cat_label_fn_factory(labels: dict[str, str]):
    def _fn(c: object) -> str:  # Streamlit –ø—Ä–∏–Ω–∏–º–∞–µ—Ç Any; –º—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º str
        s = "" if c is None else str(c)
        return labels.get(s, s)

    return _fn


def _localize_category_column(df: pd.DataFrame, labels: dict[str, str]) -> pd.DataFrame:
    """–í–µ—Ä–Ω—ë—Ç –∫–æ–ø–∏—é df, –≥–¥–µ category –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é.
    –î–∞–Ω–Ω—ã–µ/—ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —Ç—Ä–æ–≥–∞–µ–º ‚Äî —Ç–æ–ª—å–∫–æ –≤–∏–¥."""
    if "category" not in df.columns:
        return df
    d = df.copy()
    d["category"] = d["category"].map(lambda c: labels.get(str(c), str(c)))
    return d


# --- –ú–µ–Ω—é ---
lang = st.session_state.get("lang", "en")

MENU = {
    "dashboard": "menu.dashboard",
    "add_expense": "menu.add_expense",
    "browse": "menu.browse",
    "charts": "menu.charts",
    "settings": "menu.settings",
}

choice = st.sidebar.radio(
    label=t("menu.title", lang, default="Menu"),
    options=list(MENU.keys()),
    format_func=lambda k: t(MENU[k], lang, default=k),
    key="sidebar_choice",
)

# ----- Dashboard -----
if choice == "dashboard":
    st.header(t("menu.dashboard", lang, default="Dashboard"))
    st.write(
        "üìä " + t("dashboard.placeholder", lang, default="Dashboard page (placeholder)")
    )

    # ----- –§–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–µ -----
    today = date.today()
    month_start = today.replace(day=1)

    # 1) –•—Ä–∞–Ω–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ session_state (—Å—Ç—Ä–æ–∫–∏ 'YYYY-MM-DD')
    if "dash_start" not in st.session_state:
        st.session_state["dash_start"] = month_start.isoformat()
    if "dash_end" not in st.session_state:
        st.session_state["dash_end"] = today.isoformat()

    # 2) –í–∏–¥–∂–µ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥—Ä—É–≥–∏–µ –∫–ª—é—á–∏, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å session_state
    c1, c2, c3 = st.columns((1, 1, 0.5))
    with c1:
        start_d = st.date_input(
            t("common.start", lang, default="Start"),
            value=pd.to_datetime(st.session_state["dash_start"]).date(),
            key="dash_start_input",
        )

    with c2:
        end_d = st.date_input(
            t("common.end", lang, default="End"),
            value=pd.to_datetime(st.session_state["dash_end"]).date(),
            key="dash_end_input",
        )

    with c3:
        refresh = st.button(t("common.apply", lang, default="Apply"), key="dash_apply")

    # 3) –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Apply –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤–∏–¥–∂–µ—Ç–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    # –∏ –º—è–≥–∫–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if refresh:
        st.session_state["dash_start"] = start_d.isoformat()
        st.session_state["dash_end"] = end_d.isoformat()
        st.session_state["_flash"] = (
            t("dashboard.filters_applied", lang, default="Filters applied"),
            "‚öôÔ∏è",
        )
        st.rerun()

    # 4) –°—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    start_s = st.session_state["dash_start"]  # 'YYYY-MM-DD'
    end_s = st.session_state["dash_end"]  # 'YYYY-MM-DD'

    # ----- –î–∞–Ω–Ω—ã–µ -----
    raw_df = load_df(start_s, end_s, _ver=get_data_version())
    if raw_df.empty:
        st.info(
            t(
                "no_expenses_found",
                lang,
                default="No expenses found for selected period.",
            )
        )
        st.stop()

    # –û—á–∏—Å—Ç–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ —Ö–µ–ª–ø–µ—Ä
    df = prepare_df_for_view(raw_df, remove_dups=True, newest_first=True)

    # ----- KPI -----
    total = float(df["amount"].sum())
    count = len(df)
    avg = float(df["amount"].mean())
    cats = int(df["category"].nunique())

    k1, k2, k3, k4 = st.columns(4)
    k1.metric(t("kpi.total", lang, default="Total"), f"{total:.2f}")
    k2.metric(t("kpi.operations", lang, default="Operations"), f"{count}")
    k3.metric(t("kpi.average", lang, default="Average"), f"{avg:.2f}")
    k4.metric(t("kpi.categories", lang, default="Categories"), f"{cats}")

    st.divider()

    # ----- –¢–æ–ø –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π -----
    st.subheader(t("dashboard.last_operations", lang, default="Last operations"))
    show_cols = ["date", "category", "amount", "description"]

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ id –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    sort_cols = ["date"] + (["id"] if "id" in df.columns else [])

    last5 = (
        df.sort_values(sort_cols, ascending=[False] * len(sort_cols))
        .loc[:, show_cols]
        .head(5)
    )

    show_cols = ["date", "category", "amount", "description"]
    render_table(
        last5,
        cols=show_cols,
        lang=lang,
        hide_index=True,
        width="stretch",
        height=220,
    )

    # ----- –î–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º -----
    st.subheader(t("dashboard.by_category", lang, default="By category"))
    cat_totals = (
        df.groupby("category", dropna=False)["amount"]
        .sum()
        .sort_values(ascending=False)
        .rename("total")
        .to_frame()
    )
    st.bar_chart(cat_totals, use_container_width=True)

    # ----- –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ -----
    render_recent_expenses_table(ACTIVE_DB_PATH, n=10, show_title=True, lang=lang)

# =================== Add Expense ===================
elif choice == "add_expense":
    lang = st.session_state.get("lang", "en")
    st.header(t("menu.add_expense", lang, default="Add Expense"))

    # —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã —Ä–µ–∂–∏–º–∞
    MODE_CHOOSE = "choose"
    MODE_NEW = "new"

    # –∫–ª—é—á–∏ —Ñ–æ—Ä–º—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user = current_user()
    keys = add_form_keys(user)  # <- —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª—é—á–µ–π
    ss = st.session_state

    # –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
    if keys["mode"] not in ss:
        ss[keys["mode"]] = MODE_NEW

    # –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–±—Ä–æ—Å —Ñ–æ—Ä–º—ã (–í–ê–ñ–ù–û: —Ö–µ–ª–ø–µ—Ä –∂–¥—ë—Ç keys, –Ω–µ user)
    apply_form_reset(keys)

    # –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞
    def _on_mode_change():
        request_form_reset(keys)  # <- —Ç–æ–∂–µ –ø–µ—Ä–µ–¥–∞—ë–º keys

    try:
        st.segmented_control(
            label=t("browse.category", lang, default="Category"),
            options=[MODE_CHOOSE, MODE_NEW],
            format_func=lambda m: (
                t("add_expense.mode.existing", lang, default="Choose existing")
                if m == MODE_CHOOSE
                else t("add_expense.mode.new", lang, default="Enter new")
            ),
            key=keys["mode"],
            on_change=_on_mode_change,
        )
    except Exception:
        # fallback –Ω–∞ radio, –µ—Å–ª–∏ segmented_control –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        ss[keys["mode"]] = st.radio(
            t("browse.category", lang, default="Category"),
            options=[MODE_CHOOSE, MODE_NEW],
            index=[MODE_CHOOSE, MODE_NEW].index(ss[keys["mode"]]),
            format_func=lambda m: (
                t("add_expense.mode.existing", lang, default="Choose existing")
                if m == MODE_CHOOSE
                else t("add_expense.mode.new", lang, default="Enter new")
            ),
            key="add_expense_mode_radio",
        )

    # –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cats, cat_labels = categories_ui(lang)
    fmt = cat_label_fn_factory(cat_labels)

    def cat_label_fn(c: Any) -> str:
        # –í—Å–µ–≥–¥–∞ str: –Ω–∏–∫–∞–∫–∏—Ö Optional
        return str(cat_labels.get(c, c))

    # ----- —Ñ–æ—Ä–º–∞ -----
    with st.form(f"add_form_{user}", clear_on_submit=False):
        d = st.date_input(t("col.date", lang, default="Date"), key=keys["date"])

        mode = ss[keys["mode"]]
        if mode == MODE_CHOOSE:
            opts = cats if len(cats) > 0 else [""]
            index0 = 0
            cat_val = st.selectbox(
                t("add_expense.choose_existing", lang, default="Choose category"),
                options=cats,
                index=0 if cats else None,
                format_func=cat_label_fn,
                key=keys["choose"],
            )
            if not cats or cat_val == "":
                cat_val = None
            new_val = ""
        else:
            new_val = st.text_input(
                t("add_expense.new_category", lang, default="New category"),
                key=keys["new"],
            )
            cat_val = None

        amt = st.number_input(
            t("col.amount", lang, default="Amount"),
            min_value=0.0,
            step=1.0,
            key=keys["amount"],
        )
        note = st.text_area(
            t("common.description", lang, default="Description"),
            key=keys["note"],
        )

        submit = st.form_submit_button(t("common.submit", lang, default="Submit"))

    # ----- –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–±–º–∏—Ç–∞ -----
    if submit:
        errors = []

        # 1) –¥–∞—Ç–∞ -> ISO-—Å—Ç—Ä–æ–∫–∞
        date_str = ""
        if d:
            try:
                # d —ç—Ç–æ date | datetime | None
                date_str = d.strftime("%Y-%m-%d")
            except Exception:
                date_str = str(d)
        else:
            errors.append(
                t("error.missing_date", lang, default="Please select a date.")
            )

        # 2) –∫–∞—Ç–µ–≥–æ—Ä–∏—è -> –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
        if mode == MODE_NEW:
            cat = (new_val or "").strip()
        else:
            cat = (cat_val or "").strip()
        if not cat:
            errors.append(
                t(
                    "error.missing_category",
                    lang,
                    default="Please choose or enter a category.",
                )
            )

        # 3) —Å—É–º–º–∞ > 0
        try:
            ok_amount = float(amt) > 0
        except Exception:
            ok_amount = False
        if not ok_amount:
            errors.append(
                t(
                    "error.invalid_amount",
                    lang,
                    default="Amount must be greater than 0.",
                )
            )

        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if errors:
            for e in errors:
                st.error(e)
        else:
            # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ–∂–∏–¥–∞–µ—Ç date –∫–∞–∫ str
            add_expense(
                date=date_str,
                category=cat,
                amount=float(amt),
                description=(note or "").strip(),
            )

            # ‚¨áÔ∏è –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏ –û–ë–ù–û–í–õ–Ø–ï–ú –≤–µ—Ä—Å–∏—é –¥–∞–Ω–Ω—ã—Ö:
            bump_data_version()

            st.success(t("info.expense_added", lang, default="Expense added."))
            request_form_reset(keys)  # —Å–±—Ä–æ—Å –ø–æ–ª—è/—Ä–µ–∂–∏–º–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            st.rerun()

    # ---- —Ç–∞–±–ª–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π (–∫–∞–∫ –±—ã–ª–æ —É –≤–∞—Å) ----
    render_recent_expenses_table(ACTIVE_DB_PATH, n=10, show_title=False, lang=lang)

# ================ Browse & Filter ================
elif choice == "browse":
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–ø–∏—Å—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.subheader(t("menu.browse", lang, default="Browse & Filter"))
    st.caption(
        "üîé "
        + t("browse.placeholder", lang, default="Page Browse & Filter (placeholder)")
    )

    # ---------- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (safe defaults) ----------
    base_df = load_df()  # –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–∞—Ç

    if base_df is not None and not base_df.empty:
        base_df["date"] = pd.to_datetime(base_df["date"], errors="coerce")
        min_date = base_df["date"].min().date()
        max_date = base_df["date"].max().date()
        cats_all = sorted(c for c in base_df["category"].dropna().unique().tolist())
        min_amount = float(base_df["amount"].min())
        max_amount = float(base_df["amount"].max())
    else:
        # –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã
        today = date.today()
        min_date = today.replace(day=1)
        max_date = today
        cats_all = []
        min_amount = 0.0
        max_amount = 0.0

    # --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è UI (–≤—Å–µ–≥–¥–∞: –±–∞–∑–æ–≤—ã–µ + –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ –ë–î), —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
    cats, cat_labels = categories_ui(lang)  # ['entertainment', ...] + –∏–∑ –ë–î
    fmt = cat_label_fn_factory(
        cat_labels
    )  # (Any) -> str, –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    cats_all = list(cats)  # –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π

    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ session_state (–µ—Å–ª–∏ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ä–∞–Ω–µ–µ)
    _prev = st.session_state.get("filter_categories", cats_all)

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–∞–∫ –≤ cats
    cats_selected = [c for c in _prev if c in set(cats_all)]
    if not cats_selected:
        cats_selected = cats_all

    # –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
    search_value = st.session_state.get("filter_search", "")

    # ---------- –§–∏–ª—å—Ç—Ä—ã ----------
    with st.form("filter_form", clear_on_submit=False):
        c1, c2 = st.columns(2)
        with c1:
            start = st.date_input(
                t("common.start", lang, default="Start"),
                value=min_date,
                min_value=min_date,
                max_value=max_date,
                key="filter_start_date",
            )
        with c2:
            end = st.date_input(
                t("common.end", lang, default="End"),
                value=max_date,
                min_value=min_date,
                max_value=max_date,
                key="filter_end_date",
            )

        c3, c4 = st.columns([2, 1])
        with c3:
            sel_cats = st.multiselect(
                t("col.category", lang, default="Category"),
                options=cats_all,
                default=cats_selected,
                placeholder=t(
                    "browse.select_categories", lang, default="Select categories..."
                ),
                format_func=fmt,
                key="filter_categories",
            )
        with c4:
            search = st.text_input(
                t(
                    "browse.search_contains",
                    lang,
                    default="Search (description contains)",
                ),
                value=search_value,
                key="filter_search",
            )

        a1, a2 = st.columns(2)
        with a1:
            amt_min = st.number_input(
                t("browse.min_amount", lang, default="Min amount"),
                value=min_amount,
                step=1.0,
                key="filter_min_amount",
            )
        with a2:
            amt_max = st.number_input(
                t("browse.max_amount", lang, default="Max amount"),
                value=max_amount,
                step=1.0,
                key="filter_max_amount",
            )

        fcol1, fcol2 = st.columns(2)
        run = fcol1.form_submit_button(t("common.apply", lang, default="Apply"))
        reset = fcol2.form_submit_button(t("browse.reset", lang, default="Reset"))

    # ---------- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ----------
    if reset:
        st.session_state["filter_categories"] = cats_all
        st.session_state["filter_search"] = ""
        cats_selected = cats_all
        search_value = ""
        amt_min = min_amount
        amt_max = max_amount
        start = min_date
        end = max_date

    f = base_df.copy()

    if not f.empty:
        # –¥–∞—Ç—ã
        f = f[(f["date"].dt.date >= start) & (f["date"].dt.date <= end)]
        # –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if cats_selected:
            f = f[f["category"].isin(cats_selected)]
        # –ø–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
        sv = (search_value or "").strip().lower()
        if sv:
            f = f[f["description"].astype(str).str.lower().str.contains(sv, na=False)]
        # —Å—É–º–º—ã
        f = f[(f["amount"] >= float(amt_min)) & (f["amount"] <= float(amt_max))]

    # ---------- KPI ----------
    k1, k2, k3 = st.columns(3)
    with k1:
        st.metric(t("kpi.total", lang, default="Total"), f"{f['amount'].sum():.2f}")
    with k2:
        st.metric(t("kpi.operations", lang, default="Operations"), f"{len(f)}")
    with k3:
        st.metric(
            t("kpi.average", lang, default="Average"), f"{f['amount'].mean():.2f}"
        )

    st.divider()

    # ---------- –û–ø—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ----------
    st.subheader(t("browse.view_options", lang, default="View options"))

    col_opts, _ = st.columns([1, 3])
    with col_opts:
        rm_dups = st.checkbox(
            t("browse.remove_dups", lang, default="Remove exact duplicates"),
            value=True,
            help=t(
                "browse.remove_dups_help",
                lang,
                default="Remove rows that are exact duplicates (date, category, amount, description).",
            ),
            key="opt_remove_dups",
        )
        newest_first = st.checkbox(
            t("browse.newest_first", lang, default="Newest first"),
            value=True,
            key="opt_newest_first",
        )

    # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫ –ø–æ–∫–∞–∑—É (–í–ê–®–ê –ª–æ–≥–∏–∫–∞)
    f_disp = prepare_df_for_view(f, remove_dups=rm_dups, newest_first=newest_first)
    f_show = f_disp.copy()
    f_show["date"] = pd.to_datetime(f_show["date"], errors="coerce").dt.strftime(
        "%Y-%m-%d"
    )
    f_show["category"] = f_show["category"].map(
        lambda c: cat_labels.get(str(c), str(c))
    )

    # ‚ú≥Ô∏è –ü–ï–†–ï–ò–ú–ï–ù–û–í–´–í–ê–ï–ú –ó–ê–ì–û–õ–û–í–ö–ò –ö–û–õ–û–ù–û–ö
    col_names = _col_labels(
        lang
    )  # {'id': '...', 'date': '...', 'category': '...', ...}
    f_show = f_show.rename(columns=col_names)

    # —Ç–∞–±–ª–∏—Ü–∞
    st.dataframe(
        f_show,
        width="stretch",
        hide_index=True,
        column_config={
            col_names["amount"]: st.column_config.NumberColumn(
                t("col.amount", lang, default="Amount"),
                format="%.2f",
            ),
            col_names["date"]: st.column_config.DatetimeColumn(
                t("col.date", lang, default="Date"),
                format="YYYY-MM-DD",
            ),
        },
    )

    st.divider()

    # ---------- –≠–∫—Å–ø–æ—Ä—Ç ----------
    st.subheader(t("browse.export_data", lang, default="Export Data"))

    csv_bytes = f_disp.to_csv(index=False).encode("utf-8")
    st.download_button(
        label="üì• " + t("common.download_csv", lang, default="Download CSV"),
        data=csv_bytes,
        file_name="expenses_filtered.csv",
        mime="text/csv",
        key="btn_download_csv",
    )

    export_df_to_excel_button(f_disp, filename="expenses_filtered.xlsx")


# ================ Charts ================
elif choice == "charts":
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–ø–∏—Å—å
    st.subheader(t("menu.charts", lang, default="Charts"))
    st.caption(
        "üìà " + t("charts.placeholder", lang, default="Charts page (placeholder)")
    )

    SCALE = 100.0  # —Å—É–º–º—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ü–µ–Ω—Ç–∞—Ö ‚Üí –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ–ª–∏–º –Ω–∞ 100

    # --- amounts utils (charts) ---
    def _to_units(s: pd.Series) -> pd.Series:
        """
        –ü—Ä–∏–≤–æ–¥–∏–º —Å—É–º–º—ã –∫ –≤–∞–ª—é—Ç–µ:
        –µ—Å–ª–∏ –º–∞–∫—Å–∏–º—É–º –ø–æ –º–æ–¥—É–ª—é –ø–æ—Ö–æ–∂ –Ω–∞ —Å—É–º–º—ã –≤ —Ü–µ–Ω—Ç–∞—Ö (>= 1000),
        –¥–µ–ª–∏–º –Ω–∞ 100, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å.
        """
        s = pd.to_numeric(s, errors="coerce")
        return s / 100.0 if s.abs().max() >= 1000 else s

    # ---------- –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ----------
    base_df = load_df()
    if base_df is not None and not base_df.empty:
        base_df = base_df.copy()
        base_df["date"] = pd.to_datetime(base_df["date"], errors="coerce")
        ch_min_date = base_df["date"].min().date()
        ch_max_date = base_df["date"].max().date()
        ch_cats_all = sorted(c for c in base_df["category"].dropna().unique().tolist())
    else:
        today = date.today()
        ch_min_date = today.replace(day=1)
        ch_max_date = today
        ch_cats_all = []

    # --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è UI (–±–∞–∑–∞ + –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ –ë–î), —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
    cats, cat_labels = categories_ui(
        lang
    )  # –∫–ª—é—á–∏: ['entertainment', ...] + —Ç–æ, —á—Ç–æ –µ—Å—Ç—å –≤ –ë–î
    fmt = cat_label_fn_factory(cat_labels)  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä (Any) -> str
    ch_cats_all = list(cats)  # –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∫–ª—é—á–µ–π –¥–ª—è Charts

    # –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    CAT_LABEL = "cat_label"

    # —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –±—ã–ª–∏)
    _prev = st.session_state.get("charts_categories", ch_cats_all)

    # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
    ch_cats_default = [c for c in _prev if c in set(ch_cats_all)]
    if not ch_cats_default:
        ch_cats_default = ch_cats_all

    # ---------- –§–∏–ª—å—Ç—Ä—ã ----------
    with st.form("charts_filter", clear_on_submit=False):
        c1, c2 = st.columns(2)
        with c1:
            ch_start = st.date_input(
                t("common.start", lang, default="Start"),
                value=ch_min_date,
                min_value=ch_min_date,
                max_value=ch_max_date,
                key="charts_start",
            )
        with c2:
            ch_end = st.date_input(
                t("common.end", lang, default="End"),
                value=ch_max_date,
                min_value=ch_min_date,
                max_value=ch_max_date,
                key="charts_end",
            )

        c3, _ = st.columns([2, 1])
        with c3:
            ch_cats = st.multiselect(
                t("col.category", lang, default="Category"),
                options=cats,
                default=ch_cats_all,
                placeholder=t(
                    "browse.select_categories", lang, default="Select categories..."
                ),
                format_func=fmt,
                key="charts_categories",
            )

        f1, f2 = st.columns(2)
        run_charts = f1.form_submit_button(t("common.apply", lang, default="Apply"))
        reset_charts = f2.form_submit_button(t("browse.reset", lang, default="Reset"))

    # ---------- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ----------
    if reset_charts:
        ch_start = ch_min_date
        ch_end = ch_max_date
        ch_cats = ch_cats_all

    ch_df = base_df.copy()
    if ch_df is not None and not ch_df.empty:
        ch_df = ch_df[
            (ch_df["date"].dt.date >= ch_start) & (ch_df["date"].dt.date <= ch_end)
        ]
        if ch_cats:
            ch_df = ch_df[ch_df["category"].isin(ch_cats)]
    else:
        ch_df = pd.DataFrame(columns=["date", "category", "amount", "description"])

    # --- –ë–∞—Ä-—á–∞—Ä—Ç: —Å—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ---
    bar_df = (
        ch_df.groupby("category", dropna=False)["amount"]
        .sum()
        .pipe(_to_units)
        .reset_index()
        if not ch_df.empty
        else pd.DataFrame({"category": [], "amount": []})
    )

    # üëá –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é (fmt: (key)->str —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –≤—ã—à–µ)
    bar_df["cat_label"] = bar_df["category"].map(fmt)

    st.markdown("#### " + t("dashboard.by_category", lang, default="By category"))
    if not bar_df.empty:
        bar = (
            alt.Chart(bar_df)
            .mark_bar()
            .encode(
                # üëá –≤–º–µ—Å—Ç–æ —Å—ã—Ä–æ–≥–æ –∫–ª—é—á–∞ category –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
                x=alt.X(
                    "cat_label:N",
                    title=t("col.category", lang, default="Category"),
                ),
                y=alt.Y(
                    "amount:Q",
                    title=t("kpi.total", lang, default="Total"),
                    axis=alt.Axis(format=".2f"),  # 0.00
                ),
                tooltip=[
                    alt.Tooltip(
                        "cat_label:N",
                        title=t("col.category", lang, default="Category"),
                    ),
                    alt.Tooltip(
                        "amount:Q",
                        title=t("kpi.total", lang, default="Total"),
                        format=".2f",
                    ),
                ],
            )
            .properties(height=300)
        )
        st.altair_chart(bar, use_container_width=True)
    else:
        st.info(t("common.no_data", lang, default="No data to display."))

    # --- –õ–∞–π–Ω-—á–∞—Ä—Ç: —Å—É–º–º—ã –ø–æ –¥–∞—Ç–∞–º ---
    line_df = (
        ch_df.assign(date=pd.to_datetime(ch_df["date"], errors="coerce"))
        .groupby(pd.Grouper(key="date", freq="D"), dropna=False)["amount"]
        .sum()
        .pipe(_to_units)  # —Ü–µ–Ω—Ç—ã ‚Üí –≤–∞–ª—é—Ç–∞
        .reset_index()
        if not ch_df.empty
        else pd.DataFrame({"date": [], "amount": []})
    )

    st.markdown("#### " + t("charts.by_date", lang, default="By date"))
    if not line_df.empty:
        line = (
            alt.Chart(line_df)
            .mark_line(point=True)
            .encode(
                x=alt.X(
                    "date:T",
                    title=t("col.date", lang, default="Date"),
                    # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –æ—Å–∏ –¥–∞—Ç—ã:
                    # axis=alt.Axis(format="%b %d"),
                ),
                y=alt.Y(
                    "amount:Q",
                    title=t("kpi.total", lang, default="Total"),
                    axis=alt.Axis(format=".2f"),  # 0.00 –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π —Ç—ã—Å—è—á
                ),
                tooltip=[
                    alt.Tooltip(
                        "date:T",
                        title=t("col.date", lang, default="Date"),
                        format="%Y-%m-%d",
                    ),
                    alt.Tooltip(
                        "amount:Q",
                        title=t("kpi.total", lang, default="Total"),
                        format=".2f",
                    ),
                ],
            )
            .properties(height=300)
        )
        st.altair_chart(line, use_container_width=True)
    else:
        st.info(t("common.no_data", lang, default="No data to display."))

    # ---------- –≠–∫—Å–ø–∞–Ω–¥–µ—Ä: –∫—Ä—É–≥–æ–≤–∞—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ----------
    with st.expander(
        t("charts.share_by_category_pie", lang, default="Share by category (pie)"),
        expanded=False,
    ):
        pie_df = (
            ch_df.groupby("category", dropna=False)["amount"]
            .sum()
            .pipe(_to_units)
            .reset_index()
            if not ch_df.empty
            else pd.DataFrame({"category": [], "amount": []})
        )
        if not pie_df.empty:
            chart = (
                alt.Chart(pie_df)
                .mark_arc()
                .encode(
                    theta=alt.Theta("amount:Q"),
                    color=alt.Color("category:N"),
                    tooltip=[
                        alt.Tooltip(
                            "category:N",
                            title=t("col.category", lang, default="Category"),
                        ),
                        alt.Tooltip(
                            "amount:Q",
                            title=t("kpi.total", lang, default="Total"),
                            format=".2f",
                        ),
                    ],
                )
                .properties(height=300)
            )
            st.altair_chart(chart, use_container_width=True)
        else:
            st.info(t("common.no_data", lang, default="No data to display."))

    # ---------- –≠–∫—Å–ø–∞–Ω–¥–µ—Ä: –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ ----------
    with st.expander(t("charts.show_data", lang, default="Show data"), expanded=False):
        ch_show = _localize_category_column(ch_df, cat_labels)
        if not ch_show.empty:
            ch_show["date"] = pd.to_datetime(
                ch_show["date"], errors="coerce"
            ).dt.strftime("%Y-%m-%d")
        st.dataframe(
            ch_show,
            width="stretch",
            hide_index=True,
            column_config={
                "amount": st.column_config.NumberColumn(
                    t("col.amount", lang, default="Amount"), format="%.2f"
                ),
                "date": st.column_config.DatetimeColumn(
                    t("col.date", lang, default="Date"), format="YYYY-MM-DD"
                ),
            },
        )

# ================= Settings =================
elif choice == "settings":
    st.header(t("menu.settings", lang, default="Settings"))

    # —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é en)
    langs = ["en", "fr", "es"]
    current_lang = st.session_state.get("lang", "en")
    idx = langs.index(current_lang) if current_lang in langs else 0

    # —Å–µ–ª–µ–∫—Ç–æ—Ä —è–∑—ã–∫–∞
    new_lang = st.selectbox(
        t("settings.language", current_lang, default="Language"),
        options=langs,
        index=idx,
        key="sidebar_lang_select",
    )

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏
    if new_lang != current_lang:
        st.session_state["lang"] = new_lang
        st.toast(t("language_switched", new_lang, default="Language switched"))
        st.rerun()

# =================== /User / Profile ===================


def limits_path(user: str) -> Path:
    return DATA_DIR / f"{user}_budget_limits.json"


def list_users() -> list[str]:
    DATA_DIR.mkdir(parents=True, exist_ok=True)
    users = sorted(
        p.name.replace("_expenses.db", "") for p in DATA_DIR.glob("*_expenses.db")
    )
    # –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –ø—É—Å—Ç–æ ‚Äî –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º default
    return users or ["default"]


def files_for(user: str) -> tuple[Path, Path]:
    return Path(get_db_path(user)), limits_path(user)


def archive_user(user: str) -> Path:
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª—ã —é–∑–µ—Ä–∞ –≤ –∞—Ä—Ö–∏–≤–Ω—É—é –ø–∞–ø–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∞—Ä—Ö–∏–≤–∞."""
    ts = datetime.now().strftime("%Y%m%d_%H%M%S")
    arch_dir = DATA_DIR / "archives" / f"{user}_{ts}"
    arch_dir.mkdir(parents=True, exist_ok=True)
    dbf, limf = files_for(user)
    if dbf.exists():
        dbf.rename(arch_dir / dbf.name)
    if limf.exists():
        limf.rename(arch_dir / limf.name)
    return arch_dir


def rename_user(old: str, new: str) -> None:
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
    if old == new:
        return
    src_db, src_lim = files_for(old)
    dst_db, dst_lim = files_for(new)
    # –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
    if dst_db.exists() or dst_lim.exists():
        raise FileExistsError("User with this name already exists.")
    if src_db.exists():
        src_db.rename(dst_db)
    if src_lim.exists():
        src_lim.rename(dst_lim)


def switch_user(user: str, toast: str = "Switched"):
    st.session_state["current_user"] = user
    st.session_state["_flash"] = (f"{toast} to '{user}'", "üÜï")
    st.rerun()


# ---- UI ----
st.subheader(t("profile.title", lang, default="User / Profile"))

# —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
current = st.session_state.setdefault("current_user", "default")
users = list_users()
if current not in users:
    current = users[0]
    st.session_state["current_user"] = current

# –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: Active user + Create / rename user + Create
c1, c2, c3 = st.columns([1.2, 1.2, 0.6])

with c1:
    sel = st.selectbox(
        t("profile.active_user", lang, default="Active user"),
        users,
        index=users.index(current),
        key="settings_active_user",
    )

with c2:
    new_name = st.text_input(
        t("profile.create_rename_user", lang, default="Create / rename user"),
        value="",
        placeholder=t("profile.type_name", lang, default="Type name"),
        key="settings_new_name",
    ).strip()

with c3:
    if st.button(
        t("buttons.create", lang, default="Create"), key="settings_btn_create"
    ):
        if not new_name:
            st.warning(
                t("errors.warning_enter_name", lang, default="Please enter a name.")
            )
        elif new_name in users:
            st.warning(
                t(
                    "errors.warning_user_name_exists",
                    lang,
                    default="User with this name already exists.",
                )
            )
        else:
            ensure_db(get_db_path(new_name))
            switch_user(
                new_name,
                toast=t(
                    "profile.toast_created_switched", lang, default="Created & switched"
                ),
            )

# –ø–æ–¥–ø–∏—Å—å —Å —Ñ–∞–π–ª–∞–º–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
dbf, limf = files_for(sel)
st.caption(f"DB:  {dbf.name}  ‚Äî  Limits:  {limf.name}")

# –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ + Delete + Rename
c4, c5, c6 = st.columns([0.9, 0.7, 0.7])

with c4:
    do_archive = st.checkbox(
        t("profile.archive_before_delete", lang, default="Archive before delete"),
        value=True,
        key="settings_archive_before_delete",
    )

with c5:
    disable_delete = len(users) <= 1
    delete_help = t(
        "profile.cannot_delete_last",
        lang,
        default="You cannot delete the last remaining user.",
    )

    if disable_delete:
        st.caption(f"‚ÑπÔ∏è {delete_help}")

    if st.button(
        t("profile.delete_user", lang, default="Delete user"),
        disabled=disable_delete,
        help=delete_help,  # –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        key="settings_btn_delete",
    ):
        if disable_delete:
            st.info(
                t(
                    "profile.cannot_delete_last",
                    lang,
                    default="You cannot delete the last remaining user.",
                )
            )
        else:
            try:
                if do_archive:
                    archive_user(sel)
                else:
                    if dbf.exists():
                        dbf.unlink()
                    if limf.exists():
                        limf.unlink()
                remaining = [u for u in list_users() if u != sel]
                switch_user(
                    remaining[0] if remaining else "default",
                    toast=t(
                        "profile.toast_deleted_switched",
                        lang,
                        default="Deleted, switched",
                    ),
                )
            except Exception as e:
                st.error(t("profile.deletion_failed", lang, default="Deletion failed."))
                st.exception(e)

with c6:
    if st.button(
        t("profile.rename", lang, default="Rename"), key="settings_btn_rename"
    ):
        if not new_name:
            st.warning(
                t(
                    "errors.warning_enter_new_name",
                    lang,
                    default="Please enter a new name.",
                )
            )
        elif new_name in users:
            st.warning(
                t(
                    "errors.warning_user_name_exists",
                    lang,
                    default="User with this name already exists.",
                )
            )
        else:
            try:
                rename_user(sel, new_name)
                switch_user(
                    new_name,
                    toast=t(
                        "profile.toast_renamed_switched",
                        lang,
                        default="Renamed & switched",
                    ),
                )
            except Exception as e:
                st.error(t("profile.rename_failed", lang, default="Rename failed."))
                st.exception(e)

# –±—ã—Å—Ç—Ä—ã–π —Å–≤–∏—Ç—á, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ select –∏–∑–º–µ–Ω—ë–Ω
if sel != current and st.session_state.get("settings_active_user") == sel:
    switch_user(sel, toast=t("profile.toast_switched", lang, default="Switched"))

# --- Monthly limits ----------------------------------------------------------


def _active_user() -> str:
    return get_active_user()  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è


# –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏: DB –∫–∞–∫ str, limits –∫–∞–∫ Path (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
def _active_paths() -> tuple[str, Path]:
    user = _active_user()
    db_path_str = str(get_db_path(user))
    limits_file = Path("data") / f"{user}_budget_limits.json"
    return db_path_str, limits_file


# –ù–∞–¥—ë–∂–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–¥–∞–∂–µ –µ—Å–ª–∏ –ë–î –ø—É—Å—Ç–∞—è)
def _categories_for_editor(db_path: str) -> list[str]:
    try:
        cats = list_categories(db_path=db_path) or []
    except Exception:
        cats = []
    base = {"food", "transport", "groceries", "utilities", "entertainment", "other"}
    return sorted(set(cats) | base)


# –ö–ª—é—á –º–µ—Å—è—Ü–∞
def _mk(d: date) -> str:
    return month_key(d)


# –ß—Ç–µ–Ω–∏–µ/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ JSON
def _load_limits(mk: str, path: Path) -> dict[str, float]:
    if not path.exists():
        return {}
    try:
        data = json.loads(path.read_text(encoding="utf-8"))
        raw = data.get(mk, {}) or {}
        return {k: float(v) for k, v in raw.items()}
    except Exception:
        return {}


def _save_limits(mk: str, values: dict[str, float], path: Path) -> None:
    data: dict = {}
    if path.exists():
        try:
            data = json.loads(path.read_text(encoding="utf-8")) or {}
        except Exception:
            data = {}
    data[mk] = values
    path.parent.mkdir(parents=True, exist_ok=True)
    path.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")


def current_limits_month() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Å—è—Ü –¥–ª—è –±–ª–æ–∫–∞ Limits –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM."""
    src = (
        st.session_state.get("limits_month")  # –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –º–µ—Å—è—Ü –≤ UI
        or st.session_state.get("dash_start")  # –∏–Ω–∞—á–µ –¥–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ Dashboard
        or date.today().replace(day=1)  # fallback: –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    )
    if isinstance(src, str):
        try:
            src = datetime.fromisoformat(src).date()
        except ValueError:
            src = date.today().replace(day=1)
    return src.strftime("%Y-%m")


# ---------------- UI ----------------

st.subheader(t("limits.monthly_title", lang, default="Monthly limits"))

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
db_path_str, limits_file = _active_paths()
st.caption(f"DB: {db_path_str} ‚Äî Limits: {limits_file.name}")

# 1) –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π key –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
month = st.date_input(
    t("limits.month", lang, default="Month"),
    value=date.today().replace(day=1),
    format="YYYY/MM/DD",
    key="limits_month",
)
mk = _mk(month)

# 2) –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–º–∏—Ç—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
cats = _categories_for_editor(db_path_str)
limits_now = _load_limits(mk, limits_file)

# 3) –†–µ–¥–∞–∫—Ç–æ—Ä –ª–∏–º–∏—Ç–æ–≤
user = current_user()  # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
ym = current_limits_month()  # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM

st.write(
    f"{t('profile.title', lang, default='User / Profile').split(' / ')[0]}: {user} ‚Ä¢ "
    f"{t('limits.month', lang, default='Month')}: {ym}"
)

values: dict[str, float] = {}
for cat in cats:
    values[cat] = st.number_input(
        cat,
        min_value=0.0,
        step=10.0,
        value=float(limits_now.get(cat, 0.0)),
        key=f"limit_{ym}_{cat}",  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –Ω–∞ –º–µ—Å—è—Ü+–∫–∞—Ç–µ–≥–æ—Ä–∏—é
    )

# 4) –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (Save / Clear)
col1, col2 = st.columns(2)
with col1:
    if st.button(t("buttons.save", lang, default="Save"), key=f"save_limits_{mk}"):
        _save_limits(mk, values, limits_file)
        st.session_state["_flash"] = (t("saved", lang, default="Saved!"), "‚úÖ")
        st.cache_data.clear()
        st.rerun()

with col2:
    if st.button(
        t("limits.clear_month", lang, default="Clear month limits"),
        key=f"clear_limits_{mk}",
    ):
        _save_limits(mk, {}, limits_file)
        st.session_state["_flash"] = ("Limits cleared", "üóëÔ∏è")
        st.cache_data.clear()
        st.rerun()


# --- Import / Export CSV ------------------------------------------------------
mk = st.session_state.get("current_limits_month", month_key(date.today()))
current_user = st.session_state.get("current_user", "default")

# —Å–æ–±–µ—Ä—ë–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–æ—Ä–º—ã (–º–∏–∫—Ä–æ-—Ö–µ–ª–ø–µ—Ä –≤—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ä–∞–Ω–µ–µ)
current_limits = _collect_limits_from_form(prefix=f"limit_{mk}_")

exp_col1, exp_col2 = st.columns(2)

# --- Export CSV
with exp_col1:
    csv_bytes = limits_to_csv_bytes(current_limits)
    st.download_button(
        label=t("download_csv", lang, default="Download CSV"),
        data=csv_bytes,
        file_name=f"{current_user}_{mk}_limits.csv",
        mime="text/csv",
        key=f"dl_limits_csv_{current_user}_{mk}",
        help=t("download_csv", lang, default="Download CSV"),
    )

# --- Import CSV
with exp_col2:
    up = st.file_uploader(
        t("limits.import_csv", lang, default="Upload CSV"),
        type=["csv"],
        key=f"ul_limits_csv_{current_user}_{mk}",
        help=t("limits.import", lang, default="Upload CSV"),
    )

    if up is not None:
        try:
            uploaded_bytes = up.read()
            imported_limits = csv_bytes_to_limits(uploaded_bytes)

            # –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
            for cat, val in imported_limits.items():
                st.session_state[f"limit_{mk}_{cat}"] = float(val)

            # –õ–û–ì –ò–ó–ú–ï–ù–ï–ù–ò–ô: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º ¬´—á—Ç–æ –±—ã–ª–æ –≤ —Ñ–æ—Ä–º–µ¬ª vs ¬´—á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏¬ª
            append_audit_row(old=current_limits, new=imported_limits)

            # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ + –º—è–≥–∫–∏–π rerun
            st.session_state["_flash"] = (t("saved", lang, default="Saved!"), "‚úÖ")
            st.cache_data.clear()
            st.rerun()

        except Exception:
            st.error(t("csv_import_failed", lang, default="CSV import failed"))

# ---- Change log (session) ----------------------------------------------------
st.markdown(f"#### {t('change_log', lang, default='Change log (session)')}")

log_col1, log_col2, log_col3, log_col4 = st.columns(4)

audit_data = get_audit()  # —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞ –∑–∞ —Å–µ—Å—Å–∏—é

with log_col1:
    st.download_button(
        label=t("download_json", lang, default="Download JSON"),
        data=audit_to_json_bytes(audit_data),
        file_name=f"audit_{current_user}_{mk}.json",
        mime="application/json",
        key=f"dl_audit_json_{current_user}_{mk}",
    )

with log_col2:
    st.download_button(
        label=t("download_csv", lang, default="Download CSV"),
        data=audit_to_csv_bytes(audit_data),
        file_name=f"audit_{current_user}_{mk}.csv",
        mime="text/csv",
        key=f"dl_audit_csv_{current_user}_{mk}",
    )

with log_col4:
    if st.button(
        t("clear_audit", lang, default="Clear audit"),
        key=f"btn_clear_audit_{current_user}_{mk}",
    ):
        st.session_state.setdefault("__limits_audit__", [])
        st.session_state["__limits_audit__"].clear()
        st.success(t("cleared", lang, default="Cleared!"))

# 6) –ü–æ–¥—Å–∫–∞–∑–∫–∏ (3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—Ü–∞)
with st.expander("Suggestions (last 3 months)"):
    df_hist = get_expenses_df(db_path=db_path_str)
    recs = []
    if df_hist is not None and not df_hist.empty:
        df_hist["ym"] = pd.to_datetime(df_hist["date"]).dt.strftime("%Y-%m")
        recent = df_hist[df_hist["ym"] <= mk].copy()
        recent = recent.sort_values("date")
        piv = recent.pivot_table(
            index="ym", columns="category", values="amount", aggfunc="sum"
        ).sort_index()
        user = st.session_state.get("current_user", "default")
        limits_map = load_monthly_limits(
            limits_path_for(user)
        )  # dict: { "YYYY-MM": {cat: val, ...}, ... }
        cur_limits = limits_map.get(mk, {})
        for cat in sorted(set(list(piv.columns) + list(cur_limits.keys()))):
            avg3 = float(piv.get(cat, pd.Series(dtype=float)).tail(3).mean() or 0.0)
            lim = float(cur_limits.get(cat, 0.0))
            if avg3 == 0 and lim == 0:
                continue
            if avg3 > lim * 1.1:
                recs.append(
                    f"‚Üë {cat}: avg last 3 mo {avg3:.2f} > limit {lim:.2f} ‚Üí "
                    f"consider +{avg3-lim:.2f}"
                )
            elif lim > 0 and lim > avg3 * 1.25:
                recs.append(
                    f"‚Üì {cat}: limit {lim:.2f} >> avg {avg3:.2f} ‚Üí consider ‚àí{lim-avg3:.2f}"
                )
    if recs:
        for r in recs:
            st.write("‚Ä¢ " + r)
    else:
        st.caption("No suggestions yet.")
