import json
import os
import sqlite3
from datetime import date
from datetime import date as _date
from datetime import datetime
from functools import partial
from io import BytesIO
from pathlib import Path
from types import SimpleNamespace
from typing import Any, Callable, Dict, Tuple, cast

import altair as alt
import pandas as pd
import streamlit as st

from db import (
    _limits_path_for_db,
    add_expense,
    ensure_db,
    ensure_limits_file,
    get_db_path,
    get_expenses_df,
    list_categories,
)
from flash import flash, render_flash

# CSV/–∞—É–¥–∏—Ç –¥–ª—è –ª–∏–º–∏—Ç–æ–≤
from limits_tools import (
    append_audit_row,
    audit_to_csv_bytes,
    audit_to_json_bytes,
    csv_bytes_to_limits,
    get_audit,
    limits_to_csv_bytes,
)
from messages import t
from utils import (
    db_path_for,
    limits_path_for,
    load_monthly_limits,
    month_key,
    save_monthly_limits,
)


def debug_hud(page_name: str, df=None, extra: dict | None = None):
    lang = st.session_state.get("lang")
    user = st.session_state.get("ACTIVE_USER")
    db_path = st.session_state.get("ACTIVE_DB_PATH")
    ver = (
        st.session_state.get("__data_v__") or st.session_state.get("data_version") or 0
    )
    rows = len(df) if df is not None else "‚Äî"
    bits = {
        "page": page_name,
        "lang": lang,
        "user": user,
        "db_path": db_path,
        "data_ver": ver,
        "rows": rows,
        "ts": datetime.now().strftime("%H:%M:%S"),
    }
    if extra:
        bits.update(extra)
    st.caption(" | ".join(f"{k}={v}" for k, v in bits.items()))


# –û–±—Ö–æ–¥ —Å—Ç–∞—Ä—ã—Ö type-stubs streamlit –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ width="stretch"
st_any = cast(Any, st)

# --- aliases for tests (test_limits_io.py expects underscored names)
_limits_to_csv_bytes = limits_to_csv_bytes

# ---- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ----
st.session_state.setdefault("current_user", "default")


def current_user() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ session_state."""
    return st.session_state["current_user"]


ACTIVE_DB_PATH = db_path_for(current_user())  # data/default_expenses.db
ACTIVE_LIMITS_PATH = limits_path_for(current_user())  # data/default/budget_limits.json
DATA_DIR = Path("data")
BASE_CATEGORIES = [
    "entertainment",
    "food",
    "groceries",
    "other",
    "transport",
    "utilities",
]
DEBUG_HUD = False  # True ‚Äî —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

# –¥–µ–ª–∞–µ–º –ø—É—Ç–∏ –≤–∏–¥–∏–º—ã–º–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π —á–µ—Ä–µ–∑ session_state
st.session_state["ACTIVE_DB_PATH"] = ACTIVE_DB_PATH
st.session_state["ACTIVE_LIMITS_PATH"] = str(ACTIVE_LIMITS_PATH)

LabelFn = Callable[[Any], str]

# ---- legacy _flash -> new flash shim ----
_legacy = st.session_state.pop("_flash", None)
if _legacy:
    from flash import flash

    msg, icon = (_legacy + (None,))[:2]
    level = {"‚úÖ": "success", "‚ÑπÔ∏è": "info", "‚ö†Ô∏è": "warning", "‚ùå": "error"}.get(
        icon, "info"
    )
    flash(str(msg), level, 3.0)

# ---- Active user & paths (single source of truth) ----


def _parse_limits_csv(data):
    """–ü–∞—Ä—Å–∏–Ω–≥ CSV ‚Üí dict; –ø—Ä–∏–Ω–∏–º–∞–µ—Ç bytes, str –∏–ª–∏ io.BytesIO."""
    # io.BytesIO –∏–ª–∏ –ª—é–±–æ–π –æ–±—ä–µ–∫—Ç-—Ñ–∞–π–ª–æ–ø–æ–¥–æ–±–Ω—ã–π
    if hasattr(data, "read"):
        data = data.read()
    # —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ bytes
    elif isinstance(data, str):
        data = data.encode("utf-8")
    # –¥–∞–ª–µ–µ —Ç–æ—á–Ω–æ bytes
    return csv_bytes_to_limits(data)


def get_active_user() -> str:
    """–ò–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ session_state (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'default')."""
    return st.session_state.setdefault("current_user", "default")


def get_active_paths():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (db_path, limits_path) –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ."""
    user = get_active_user()
    return db_path_for(user), limits_path_for(user)


_db, _limits = get_active_paths()
st.caption(f"DB: {_db} ‚Äî Limits: {_limits.name}")


def export_df_to_excel_button(df: pd.DataFrame, filename: str = "expenses.xlsx"):
    if df.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–≤–∏–∂–æ–∫
    engine = None
    try:
        import xlsxwriter  # noqa: F401

        engine = "xlsxwriter"
    except ImportError:
        try:
            import openpyxl  # noqa: F401

            engine = "openpyxl"
        except ImportError:
            st.error(
                "–î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–∞–∫–µ—Ç–æ–≤: "
                "`pip install XlsxWriter` –∏–ª–∏ `pip install openpyxl`."
            )
            return

    buf = BytesIO()
    with pd.ExcelWriter(buf, engine=engine) as writer:
        df.to_excel(writer, index=False, sheet_name="Expenses")

    st.download_button(
        label="‚¨áÔ∏è Download Excel",
        data=buf.getvalue(),
        file_name=filename,
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )


def prepare_df_for_view(
    df: pd.DataFrame,
    *,
    remove_dups: bool = True,
    newest_first: bool = True,
) -> pd.DataFrame:
    """–û—á–∏—â–∞–µ—Ç –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/–º–µ—Ç—Ä–∏–∫."""
    d = df.copy()
    if remove_dups:
        d = d.drop_duplicates(
            subset=["date", "category", "amount", "description"],
            keep="last",
        )
    d["date"] = pd.to_datetime(d["date"], errors="coerce")
    d = d.sort_values("date", ascending=not newest_first).reset_index(drop=True)
    return d


def _normalize_limits_json(obj: dict) -> dict[str, dict[str, float]]:
    """
    –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ö–æ–¥ –∫ —Ñ–æ—Ä–º–∞—Ç—É:
      {"YYYY-MM": {"food": 200.0, "transport": 50.0, ...}, ...}
    –ë—Ä–æ—Å–∞–µ–º ValueError –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.
    """
    if not isinstance(obj, dict):
        raise ValueError("Root must be an object")
    out: dict[str, dict[str, float]] = {}
    for mk, limits in obj.items():
        if not isinstance(mk, str) or len(mk) != 7 or mk[4] != "-":
            raise ValueError(f"Invalid month key: {mk!r}")
        if not isinstance(limits, dict):
            raise ValueError(f"Month {mk} must map to an object of category->limit")
        inner: dict[str, float] = {}
        for cat, val in limits.items():
            if not isinstance(cat, str) or not cat.strip():
                continue
            try:
                f = float(val)
            except Exception:
                continue
            if f >= 0:
                inner[cat.strip()] = f
        out[mk] = inner
    return out


def _mdonth_key(date_value):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ YYYY-MM –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Å—è—á–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
    """
    return date_value.strftime("%Y-%m")


def _collect_limits_for_month(mk: str, categories: list[str]) -> dict[str, float]:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–æ–ª–µ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ st.session_state."""
    out: dict[str, float] = {}
    for cat in categories:
        raw = st.session_state.get(f"limit_{mk}_{cat}")
        try:
            out[cat] = float(raw) if raw is not None else 0.0
        except Exception:
            out[cat] = 0.0
    return out


def _collect_limits_from_form(prefix: str) -> Dict[str, float]:
    """
    –°—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ st.session_state[prefix + <category>] –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {category: float}.
    –ù–∏–∫–∞–∫–∏—Ö –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º–µ.
    """
    out: Dict[str, float] = {}
    plen = len(prefix)
    for k, v in st.session_state.items():
        if isinstance(k, str) and k.startswith(prefix):
            cat = k[plen:]
            try:
                out[cat] = float(v) if v not in ("", None) else 0.0
            except Exception:
                # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ/–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
                pass
    return out


# ---- –¢–∞–±–ª–∏—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è) ----
def _col_labels(lang: str) -> dict[str, str]:
    return {
        "id": t("col.id", lang, default="id"),
        "date": t("col.date", lang, default="Date"),
        "category": t("col.category", lang, default="Category"),
        "amount": t("col.amount", lang, default="Amount"),
        "description": t("col.description", lang, default="Description"),
    }


def render_table(
    df, cols, lang: str, *, labels: dict[str, str] | None = None, **st_kwargs
):
    df_disp = df.loc[:, cols]
    if labels is not None:
        df_disp = _localize_category_column(df_disp, labels)
    df_disp = df_disp.rename(columns=_col_labels(lang))
    st.dataframe(df_disp, **st_kwargs)


def render_recent_expenses_table(
    db_path: str, n: int = 10, *, show_title: bool = False, lang: str = "en"
) -> None:
    if show_title:
        st.subheader(t("recent_expenses", lang, default="Recent expenses"))

    raw_df = get_expenses_df(db_path=db_path)
    df = prepare_df_for_view(raw_df, remove_dups=True, newest_first=True)
    df_recent = df.head(n)

    # üîπ –õ–æ–∫–∞–ª—å–Ω–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π + –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    _, cat_labels = categories_ui(lang)  # <- –ù–ï–¢ –≤–Ω–µ—à–Ω–∏—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    df_recent = df_recent.copy()
    if "category" in df_recent.columns:
        df_recent["category"] = df_recent["category"].map(
            lambda c: cat_labels.get(str(c), str(c))
        )

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    col_names = _col_labels(lang)
    df_recent = df_recent.rename(columns=col_names)

    st.dataframe(
        df_recent,
        hide_index=True,
        width="stretch",
        column_config={
            "amount": st.column_config.NumberColumn(
                t("col.amount", lang, default="Amount"), format="%.2f"
            ),
            "date": st.column_config.DatetimeColumn(
                t("col.date", lang, default="Date"), format="YYYY-MM-DD"
            ),
        },
    )


# ===== –õ–û–ì –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê =====
print(f"\nüîÑ Streamlit –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")


# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====
@st.cache_data(ttl=10, show_spinner=False)
def load_df(
    db_path: str,  # <‚Äî –ù–û–í–û–ï: –ø—É—Ç—å –∫ –ë–î —Ç–µ–ø–µ—Ä—å —á–∞—Å—Ç—å –∫–ª—é—á–∞ –∫—ç—à–∞
    start: str | None = None,
    end: str | None = None,
    *,
    _ver: int = 0,
) -> pd.DataFrame:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î –∫–∞–∫ DataFrame.
    db_path –≤—Ö–æ–¥–∏—Ç –≤ –∫–ª—é—á –∫—ç—à–∞ ‚Äî —Å–º–µ–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è –≤—Å–µ–≥–¥–∞ –¥–∞—ë—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ.
    –ü–∞—Ä–∞–º–µ—Ç—Ä _ver –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞.
    """
    df = get_expenses_df(db_path, start_date=start, end_date=end)

    expected = ["date", "category", "amount", "description"]
    for col in expected:
        if col not in df.columns:
            df[col] = pd.NA

    df["date"] = pd.to_datetime(df["date"], errors="coerce")
    df["amount"] = pd.to_numeric(df["amount"], errors="coerce")

    return df.dropna(subset=["date", "amount"])


@st.cache_data(ttl=120)
def get_categories(
    db_path: str = "expenses.db", ver: int = 0
) -> Tuple[list[str], float]:
    """
    –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î (distinct), –∫—ç—à–∏—Ä—É–µ–º –Ω–∞ 2 –º–∏–Ω.
    –ö—ç—à –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ¬´–ø—Ä–∏–≤—è–∑–∞–Ω¬ª –∫:
      - –ø—É—Ç–∏ –∫ –ë–î (db_path),
      - –≤–µ—Ä—Å–∏–∏ –¥–∞–Ω–Ω—ã—Ö (ver),
    –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ë–î (mtime).
    """
    try:
        db_mtime = os.path.getmtime(db_path)

        with sqlite3.connect(db_path) as conn:
            rows = conn.execute("SELECT DISTINCT category FROM expenses").fetchall()
            cats = [r[0] for r in rows if r and r[0]]

        return cats, db_mtime
    except Exception:
        return [], 0.0


def make_category_formatter(labels: dict[str, str]):
    """–°–æ–∑–¥–∞—ë—Ç —Ñ—É–Ω–∫—Ü–∏—é: key -> –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å"""

    def fmt(val: Any) -> str:
        s = str(val) if val is not None else ""
        return labels.get(s, s)

    return fmt


def categories_ui(lang: str) -> tuple[list[str], dict[str, str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      - cats: —Å–ø–∏—Å–æ–∫ –¢–ï–•–ö–õ–Æ–ß–ï–ô (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏)
      - labels: —Å–ª–æ–≤–∞—Ä—å {–∫–ª—é—á -> –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å}
    """
    db_path = str(st.session_state.get("ACTIVE_DB_PATH", "data/default_expenses.db"))

    # 1) –¥–æ—Å—Ç–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î (–ø–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã get_categories)
    try:
        got = get_categories(db_path=db_path, ver=get_data_version())
        db_cats = got[0] if isinstance(got, tuple) else got
    except Exception:
        db_cats = []

    # 2) UNION –±–∞–∑–æ–≤—ã—Ö –∏ –ë–î
    all_cats = set(BASE_CATEGORIES) | {str(c).strip() for c in db_cats if c}

    # 3) –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è (–∫–ª—é—á–∏ –≤ lower(), —á—Ç–æ–±—ã 'VISA' —Å–æ–≤–ø–∞–¥–∞–ª–æ —Å 'visa' –≤ messages)
    def tr(key: str) -> str:
        return t(f"categories.{key.lower()}", lang, default=key)

    labels = {c: tr(c) for c in all_cats}

    # 4) —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏
    cats_sorted = sorted(all_cats, key=lambda c: labels[c].lower())
    return list(cats_sorted), labels


def make_fmt(labels: dict[str, str]) -> LabelFn:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä: key -> –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π label (str)."""

    def _fmt(v: Any) -> str:
        s = "" if v is None else str(v)
        return labels.get(s, s)

    return _fmt


def get_filtered_df_for_period(
    base_df: pd.DataFrame,
    start: date,
    end: date,
    categories: list[str] | None = None,
    search: str | None = None,
    min_amount: float | None = None,
    max_amount: float | None = None,
) -> pd.DataFrame:
    df = base_df.copy()
    if df.empty:
        return df
    df["date"] = pd.to_datetime(df["date"], errors="coerce")
    df = df[(df["date"].dt.date >= start) & (df["date"].dt.date <= end)]
    if categories:
        df = df[df["category"].isin(categories)]
    if search:
        s = search.strip().lower()
        if s:
            df = df[df["description"].astype(str).str.lower().str.contains(s, na=False)]
    if min_amount is not None:
        df = df[df["amount"] >= float(min_amount)]
    if max_amount is not None:
        df = df[df["amount"] <= float(max_amount)]
    return df


def get_expenses_view(
    *, db_path: str, start: str, end: str, lang: str, newest_first: bool = True
) -> Tuple[pd.DataFrame, LabelFn, dict[str, str]]:
    """
    –ï–¥–∏–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü:
      1) load_df(..., _ver=get_data_version())
      2) prepare_df_for_view(..., remove_dups=True, newest_first=...)
      3) –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –ö–û–õ–û–ù–ö–ò 'category' (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ; –∫–ª—é—á–∏ –≤ –ë–î –Ω–µ —Ç—Ä–æ–≥–∞–µ–º)

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      df  ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–æ–π 'category'
      fmt ‚Äî —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (Any -> str)
      labels ‚Äî —Å–ª–æ–≤–∞—Ä—å {key -> label}
    """
    ver = get_data_version()
    raw = load_df(db_path, start, end, _ver=ver)
    df = prepare_df_for_view(raw, remove_dups=True, newest_first=newest_first)

    _, labels = categories_ui(lang)  # labels: {—Ç–µ—Ö. –∫–ª—é—á -> –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π label}
    fmt = make_fmt(labels)

    if "category" in df.columns:
        df = df.copy()
        df["category"] = df["category"].map(fmt)

    return df, fmt, labels


# ---- —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ----
st.session_state.setdefault("lang", "en")
lang = st.session_state["lang"]

# —á—Ç–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
limits = load_monthly_limits(user=current_user())

# ...–∏–∑–º–µ–Ω–∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å limits –Ω–∞ —Ñ–æ—Ä–º–µ...

# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
save_monthly_limits(limits, user=current_user())


def _fetch_categories() -> list[str]:
    # 1) –µ—Å–ª–∏ –µ—Å—Ç—å list_categories –≤ db.py ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ
    try:
        from db import (
            list_categories as _list_categories,
        )  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è

        cats = _list_categories()
        if cats:
            return cats
    except Exception:
        pass
    # 2) –∏–Ω–∞—á–µ —Å–æ–±–µ—Ä—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
    try:
        db_path = st.session_state.get("ACTIVE_DB_PATH", "data/default_expenses.db")
        df = get_expenses_df(db_path=db_path)
        if "category" in df.columns and not df.empty:
            return sorted(map(str, df["category"].dropna().unique().tolist()))
    except Exception:
        pass
    # 3) –¥–µ—Ñ–æ–ª—Ç
    return ["food", "transport", "health", "entertainment", "other"]


# ===== Add Expense: helpers =====


def add_form_keys(user: str | None = None) -> dict[str, str]:
    sfx = user or st.session_state.get("current_user", "default")
    return {
        "mode": f"add_cat_mode_{sfx}",
        "choose": f"add_cat_choose_{sfx}",
        "new": f"add_cat_new_{sfx}",
        "date": f"add_date_{sfx}",
        "amount": f"add_amount_{sfx}",
        "note": f"add_note_{sfx}",
        "reset": f"add_form_reset_{sfx}",  # —Ñ–ª–∞–≥ —Å–±—Ä–æ—Å–∞
    }


# ===== –í–µ—Ä—Å–∏—è –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∞) =====


def get_data_version() -> int:
    """–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–µ–π."""
    return st.session_state.setdefault("data_version", 0)


def bump_data_version() -> None:
    """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –≤–µ—Ä—Å–∏–∏ –¥–∞–Ω–Ω—ã—Ö ‚Äî –≤—Å–µ –∫—ç—à–∏—Ä—É–µ–º—ã–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –Ω–æ–≤—ã–π _ver."""
    st.session_state["data_version"] = get_data_version() + 1


# ---- –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–±—Ä–æ—Å (—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Ñ–ª–∞–∂–æ–∫!) ----
def request_form_reset(keys: dict[str, str]) -> None:
    st.session_state[keys["reset"]] = True


# ---- –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–±—Ä–æ—Å (—Ä–µ–∞–ª—å–Ω–æ —á–∏—Å—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏—è) ----


def apply_form_reset(keys: dict[str, str]) -> None:
    ss = st.session_state
    if ss.pop(keys["reset"], False):
        # –ù–ï —Ç—Ä–æ–≥–∞–µ–º —Ä–µ–∂–∏–º:
        # ss[keys["mode"]] –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        ss[keys["choose"]] = None
        ss[keys["new"]] = ""
        ss[keys["amount"]] = 0.0
        ss[keys["note"]] = ""
        ss[keys["date"]] = ss.get(keys["date"], _date.today())


def render_add_expense_page(lang: str) -> None:
    ss = st.session_state
    user = current_user()  # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keys = add_form_keys(user)  # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏ —Ñ–æ—Ä–º—ã
    apply_form_reset(keys)  # —Å–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


def cat_label_fn_factory(labels: dict[str, str]) -> LabelFn:
    def fmt(key: Any) -> str:  # <<< –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "key", –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç —Ç–∏–ø
        s = "" if key is None else str(key)
        return labels.get(s, s)

    return fmt


def _localize_category_column(df: pd.DataFrame, labels: dict[str, str]) -> pd.DataFrame:
    """–í–µ—Ä–Ω—ë—Ç –∫–æ–ø–∏—é df, –≥–¥–µ category –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é.
    –î–∞–Ω–Ω—ã–µ/—ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —Ç—Ä–æ–≥–∞–µ–º ‚Äî —Ç–æ–ª—å–∫–æ –≤–∏–¥."""
    if "category" not in df.columns:
        return df
    d = df.copy()
    d["category"] = d["category"].map(lambda c: labels.get(str(c), str(c)))
    return d


# --- –ú–µ–Ω—é ---
lang = st.session_state.get("lang", "en")

MENU = {
    "dashboard": "menu.dashboard",
    "add_expense": "menu.add_expense",
    "browse": "menu.browse",
    "charts": "menu.charts",
    "settings": "menu.settings",
}

choice = st.sidebar.radio(
    label=t("menu.title", lang, default="Menu"),
    options=list(MENU.keys()),
    format_func=lambda k: t(MENU[k], lang, default=k),
    key="sidebar_choice",
)

# ------ Dashboard ------
if choice == "dashboard":
    st.header(t("menu.dashboard", lang, default="Dashboard"))
    st.write(
        "üìä " + t("dashboard.placeholder", lang, default="Dashboard page (placeholder)")
    )

    render_flash()
    if DEBUG_HUD:
        debug_hud("Dashboard/pre")

    lang = st.session_state.get("lang", "en")
    cats, cat_labels = categories_ui(lang)
    fmt = make_category_formatter(cat_labels)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º
    base_df = load_df(
        st.session_state.get("ACTIVE_DB_PATH", "data/default_expenses.db"),
        _ver=get_data_version(),
    )

    # ===== –§–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–µ =====
    today = date.today()
    month_start = today.replace(day=1)

    # 1) –•—Ä–∞–Ω–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ session_state (—Å—Ç—Ä–æ–∫–∏ 'YYYY-MM-DD')
    if "dash_start" not in st.session_state:
        st.session_state["dash_start"] = month_start.isoformat()
    if "dash_end" not in st.session_state:
        st.session_state["dash_end"] = today.isoformat()

    # >>> –ï–î–ò–ù–´–ô —Ñ–∏–ª—å—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Dashboard (—Å–æ–≤–º–µ—Å—Ç–∏–º —Å Browse) <<<
    df_filtered = get_filtered_df_for_period(
        base_df,
        start=pd.to_datetime(st.session_state["dash_start"]).date(),
        end=pd.to_datetime(st.session_state["dash_end"]).date(),
        # –Ω–∞ Dashboard –±–µ–∑ category/search/min/max ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—ë –∑–∞ –ø–µ—Ä–∏–æ–¥
    )

    # 2) –í–∏–¥–∂–µ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥—Ä—É–≥–∏–µ –∫–ª—é—á–∏, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å session_state
    c1, c2, c3 = st.columns((1, 1, 0.5))
    with c1:
        start_d = st.date_input(
            t("common.start", lang, default="Start"),
            value=pd.to_datetime(st.session_state["dash_start"]).date(),
            key="dash_start_input",
        )

    with c2:
        end_d = st.date_input(
            t("common.end", lang, default="End"),
            value=pd.to_datetime(st.session_state["dash_end"]).date(),
            key="dash_end_input",
        )

    with c3:
        refresh = st.button(t("common.apply", lang, default="Apply"), key="dash_apply")

    # 3) –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Apply –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤–∏–¥–∂–µ—Ç–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    # –∏ –º—è–≥–∫–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if refresh:
        st.session_state["dash_start"] = start_d.isoformat()
        st.session_state["dash_end"] = end_d.isoformat()
        st.session_state["_flash"] = (
            t("dashboard.filters_applied", lang, default="Filters applied"),
            "‚öôÔ∏è",
        )
        st.rerun()

    # 4) –°—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    start_s = st.session_state["dash_start"]  # 'YYYY-MM-DD'
    end_s = st.session_state["dash_end"]  # 'YYYY-MM-DD'

    # ---- –î–∞–Ω–Ω—ã–µ ----
    lang = st.session_state.get("lang", "en")
    db_path = str(st.session_state.get("ACTIVE_DB_PATH", "data/default_expenses.db"))

    st.cache_data.clear()  # —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –ø–æ—Ç–æ–º —É–±–µ—Ä—ë–º
    raw_df = load_df(db_path, start_s, end_s, _ver=get_data_version())
    if DEBUG_HUD:
        debug_hud("Dashboard/post", raw_df)

    if raw_df.empty:
        st.info(
            t(
                "no_expenses_found",
                lang,
                default="No expenses found for selected period.",
            )
        )
        st.stop()

    # –û—á–∏—Å—Ç–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ —Ö–µ–ª–ø–µ—Ä
    df = prepare_df_for_view(raw_df, remove_dups=True, newest_first=True)
    if DEBUG_HUD:
        debug_hud("Dashboard/clean", df)

    # ===== KPI =====
    total = float(df["amount"].sum()) if not df.empty else 0.0
    count = int(len(df))
    avg = float(df["amount"].mean()) if count else 0.0
    cats = int(df["category"].nunique()) if not df.empty else 0

    k1, k2, k3, k4 = st.columns(4)
    k1.metric(t("kpi.total", lang, default="Total"), f"{total:.2f}")
    k2.metric(t("kpi.operations", lang, default="Operations"), f"{count}")
    k3.metric(t("kpi.average", lang, default="Average"), f"{avg:.2f}")
    k4.metric(t("kpi.categories", lang, default="Categories"), f"{cats}")
    st.divider()

    # ===== Last operations (TOP N) =====
    N_LAST = 10
    st.subheader(t("dashboard.last_operations", lang, default="Last operations"))

    last_ops = df.sort_values(["date"], ascending=False).head(N_LAST).copy()
    last_ops["date"] = pd.to_datetime(last_ops["date"]).dt.strftime("%Y-%m-%d")
    last_ops["category"] = last_ops["category"].map(fmt)

    st.dataframe(
        last_ops[["date", "category", "amount", "description"]],
        use_container_width=True,
        hide_index=True,
        height=220,  # –¥–∞—ë—Ç —Å–∫—Ä–æ–ª–ª –≤ –±–ª–æ–∫–µ
        column_config={"amount": st.column_config.NumberColumn(format="%.2f")},
    )

    # ===== All expenses in period (–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫) =====
    st.subheader(
        t("dashboard.recent_expenses_full", lang, default="All expenses in period")
    )

    all_exp = df.copy()
    all_exp["date"] = pd.to_datetime(all_exp["date"]).dt.strftime("%Y-%m-%d")
    all_exp["category"] = all_exp["category"].map(fmt)

    st.dataframe(
        all_exp[["id", "date", "category", "amount", "description"]],
        use_container_width=True,
        hide_index=True,
        height=420,  # –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫
        column_config={"amount": st.column_config.NumberColumn(format="%.2f")},
    )

    # ----- –î–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º -----
    st.subheader(t("dashboard.by_category", lang, default="By category"))
    cat_totals = (
        df.groupby("category", dropna=False)["amount"]
        .sum()
        .sort_values(ascending=False)
        .rename("total")
        .to_frame()
    )
    # –ª–æ–∫–∞–ª–∏–∑—É–µ–º –ø–æ–¥–ø–∏—Å–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –∏–Ω–¥–µ–∫—Å–µ
    cat_totals_local = cat_totals.copy()
    cat_totals_local.index = cat_totals_local.index.map(fmt)

    st.bar_chart(cat_totals_local, use_container_width=True)

    # ----- –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ -----
    render_recent_expenses_table(ACTIVE_DB_PATH, n=10, show_title=True, lang=lang)

# =================== Add Expense ===================
elif choice == "add_expense":
    lang = st.session_state.get("lang", "en")
    st.header(t("menu.add_expense", lang, default="Add Expense"))
    render_flash()

    # —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã —Ä–µ–∂–∏–º–∞
    MODE_CHOOSE = "choose"
    MODE_NEW = "new"

    # –∫–ª—é—á–∏ —Ñ–æ—Ä–º—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user = current_user()
    keys = add_form_keys(user)  # <- —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª—é—á–µ–π
    ss = st.session_state

    # –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
    if keys["mode"] not in ss:
        ss[keys["mode"]] = MODE_NEW

    # –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–±—Ä–æ—Å —Ñ–æ—Ä–º—ã (–í–ê–ñ–ù–û: —Ö–µ–ª–ø–µ—Ä –∂–¥—ë—Ç keys, –Ω–µ user)
    apply_form_reset(keys)

    # –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞
    def _on_mode_change():
        request_form_reset(keys)  # <- —Ç–æ–∂–µ –ø–µ—Ä–µ–¥–∞—ë–º keys

    try:
        st.segmented_control(
            label=t("browse.category", lang, default="Category"),
            options=[MODE_CHOOSE, MODE_NEW],
            format_func=lambda m: (
                t("add_expense.mode.existing", lang, default="Choose existing")
                if m == MODE_CHOOSE
                else t("add_expense.mode.new", lang, default="Enter new")
            ),
            key=keys["mode"],
            on_change=_on_mode_change,
        )
    except Exception:
        # fallback –Ω–∞ radio, –µ—Å–ª–∏ segmented_control –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        ss[keys["mode"]] = st.radio(
            t("browse.category", lang, default="Category"),
            options=[MODE_CHOOSE, MODE_NEW],
            index=[MODE_CHOOSE, MODE_NEW].index(ss[keys["mode"]]),
            format_func=lambda m: (
                t("add_expense.mode.existing", lang, default="Choose existing")
                if m == MODE_CHOOSE
                else t("add_expense.mode.new", lang, default="Enter new")
            ),
            key="add_expense_mode_radio",
        )

    # –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cats, cat_labels = categories_ui(lang)
    fmt = make_fmt(cat_labels)

    # def cat_label_fn(c: Any) -> str:
    #     –í—Å–µ–≥–¥–∞ str: –Ω–∏–∫–∞–∫–∏—Ö Optional
    #     return str(cat_labels.get(c, c))

    # ----- —Ñ–æ—Ä–º–∞ -----
    with st.form(f"add_form_{user}", clear_on_submit=False):
        d = st.date_input(t("col.date", lang, default="Date"), key=keys["date"])

        mode = ss[keys["mode"]]
        if mode == MODE_CHOOSE:
            opts = cats if len(cats) > 0 else [""]
            index0 = 0
            cat_val = st.selectbox(
                t("add_expense.choose_existing", lang, default="Choose category"),
                options=cats,
                index=0 if cats else None,
                format_func=fmt,
                key=keys["choose"],
            )
            if not cats or cat_val == "":
                cat_val = None
            new_val = ""
        else:
            new_val = st.text_input(
                t("add_expense.new_category", lang, default="New category"),
                key=keys["new"],
            )
            cat_val = None

        amt = st.number_input(
            t("col.amount", lang, default="Amount"),
            min_value=0.0,
            step=1.0,
            key=keys["amount"],
        )
        note = st.text_area(
            t("common.description", lang, default="Description"),
            key=keys["note"],
        )

        submit = st.form_submit_button(t("common.submit", lang, default="Submit"))

    # ----- –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–±–º–∏—Ç–∞ -----
    if submit:
        errors = []

        # 1) –¥–∞—Ç–∞ -> ISO-—Å—Ç—Ä–æ–∫–∞
        date_str = ""
        if d:
            try:
                # d —ç—Ç–æ date | datetime | None
                date_str = d.strftime("%Y-%m-%d")
            except Exception:
                date_str = str(d)
        else:
            errors.append(
                t("error.missing_date", lang, default="Please select a date.")
            )

        # 2) –∫–∞—Ç–µ–≥–æ—Ä–∏—è -> –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
        if mode == MODE_NEW:
            cat = (new_val or "").strip()
        else:
            cat = (cat_val or "").strip()
        if not cat:
            errors.append(
                t(
                    "error.missing_category",
                    lang,
                    default="Please choose or enter a category.",
                )
            )

        # 3) —Å—É–º–º–∞ > 0
        try:
            ok_amount = float(amt) > 0
        except Exception:
            ok_amount = False
        if not ok_amount:
            errors.append(
                t(
                    "error.invalid_amount",
                    lang,
                    default="Amount must be greater than 0.",
                )
            )

        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if errors:
            for e in errors:
                st.error(e)
        else:
            # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ–∂–∏–¥–∞–µ—Ç date –∫–∞–∫ str
            add_expense(
                date=date_str,
                category=cat,
                amount=float(amt),
                description=(note or "").strip(),
            )

            # ‚¨áÔ∏è –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏ –û–ë–ù–û–í–õ–Ø–ï–ú –≤–µ—Ä—Å–∏—é –¥–∞–Ω–Ω—ã—Ö:
            st.cache_data.clear()  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤
            bump_data_version()

            flash(
                t("info.expense_added", lang, default="Expense added."), "success", 3.5
            )
            request_form_reset(keys)
            st.rerun()

    # ---- —Ç–∞–±–ª–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π (–∫–∞–∫ –±—ã–ª–æ —É –≤–∞—Å) ----
    render_recent_expenses_table(ACTIVE_DB_PATH, n=10, show_title=False, lang=lang)

# ===== Browse & Filter (–Ω–æ–≤—ã–π –∫–∞—Ä–∫–∞—Å) =====
elif choice == "browse":
    st.subheader(t("menu.browse", lang, default="Browse & Filter"))
    st.caption(
        "üîé "
        + t("browse.placeholder", lang, default="Page Browse & Filter (placeholder)")
    )
    render_flash()
    if DEBUG_HUD:
        debug_hud("Browse/pre")

    # ---------- –ë–∞–∑–∞ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã ----------
    db_path = str(st.session_state.get("ACTIVE_DB_PATH", "data/default_expenses.db"))
    base_df = load_df(db_path, _ver=get_data_version())  # –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–∞—Ç
    if DEBUG_HUD:
        debug_hud("Browse/post", base_df)

    if base_df is not None and not base_df.empty:
        base_df["date"] = pd.to_datetime(base_df["date"], errors="coerce")
        min_date = base_df["date"].min().date()
        max_date = base_df["date"].max().date()
        cats_all_from_db = sorted(
            c for c in base_df["category"].dropna().unique().tolist()
        )
        min_amount_def = float(base_df["amount"].min())
        max_amount_def = float(base_df["amount"].max())
    else:
        today = date.today()
        min_date, max_date = today.replace(day=1), today
        cats_all_from_db, min_amount_def, max_amount_def = [], 0.0, 0.0

    cats, cat_labels = categories_ui(lang)
    fmt = make_category_formatter(cat_labels)
    if DEBUG_HUD:
        debug_hud("labels", extra={"labels_lang": lang, "labels_cnt": len(cat_labels)})

    cats_all = list(dict.fromkeys([*cats, *cats_all_from_db]))

    ss = st.session_state

    # ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (—Ö—Ä–∞–Ω–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è) ----------
    if "bf_init" not in ss:
        ss["bf_start"] = min_date.isoformat()
        ss["bf_end"] = max_date.isoformat()
        ss["bf_categories"] = cats_all.copy()
        ss["bf_search"] = ""
        ss["bf_min"] = min_amount_def
        ss["bf_max"] = max_amount_def
        ss["bf_init"] = True

    # ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ Reset / Apply –î–û —Ä–µ–Ω–¥–µ—Ä–∞ ----------
    if ss.pop("_bf_do_reset", False):
        ss["bf_start"] = min_date.isoformat()
        ss["bf_end"] = max_date.isoformat()
        ss["bf_categories"] = cats_all.copy()
        ss["bf_search"] = ""
        ss["bf_min"] = min_amount_def
        ss["bf_max"] = max_amount_def
        st.rerun()

    if ss.pop("_bf_do_apply", False):
        # –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ *_input –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
        ss["bf_start"] = ss["bf_start_input"].isoformat()
        ss["bf_end"] = ss["bf_end_input"].isoformat()
        ss["bf_categories"] = ss["bf_categories_input"]
        ss["bf_search"] = ss["bf_search_input"]
        ss["bf_min"] = ss["bf_min_input"]
        ss["bf_max"] = ss["bf_max_input"]
        ss["_flash"] = (
            t("dashboard.filters_applied", lang, default="Filters applied"),
            "‚öôÔ∏è",
        )
        st.rerun()

    # ---------- –í–∏–¥–∂–µ—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ *_input) ----------
    with st.form("filter_form", clear_on_submit=False):
        c1, c2 = st.columns(2)
        with c1:
            st.date_input(
                t("common.start", lang, default="Start"),
                value=pd.to_datetime(ss["bf_start"]).date(),
                min_value=min_date,
                max_value=max_date,
                key="bf_start_input",
            )
        with c2:
            st.date_input(
                t("common.end", lang, default="End"),
                value=pd.to_datetime(ss["bf_end"]).date(),
                min_value=min_date,
                max_value=max_date,
                key="bf_end_input",
            )

        c3, c4 = st.columns([2, 1])
        with c3:
            st.multiselect(
                t("col.category", lang, default="Category"),
                options=cats_all,
                default=ss["bf_categories"],
                format_func=fmt,
                key="bf_categories_input",
            )
        with c4:
            st.text_input(
                t(
                    "browse.search_contains",
                    lang,
                    default="Search (description contains)",
                ),
                value=ss["bf_search"],
                key="bf_search_input",
            )

        a1, a2 = st.columns(2)
        with a1:
            st.number_input(
                t("browse.min_amount", lang, default="Min amount"),
                value=float(ss["bf_min"]),
                step=1.0,
                key="bf_min_input",
            )
        with a2:
            st.number_input(
                t("browse.max_amount", lang, default="Max amount"),
                value=float(ss["bf_max"]),
                step=1.0,
                key="bf_max_input",
            )

        col_btn1, col_btn2 = st.columns(2)
        run = col_btn1.form_submit_button(t("common.apply", lang, default="Apply"))
        reset = col_btn2.form_submit_button(t("browse.reset", lang, default="Reset"))

    if reset:
        ss["_bf_do_reset"] = True
        st.rerun()

    if run:
        ss["_bf_do_apply"] = True
        st.rerun()

    # ---------- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ----------
    f = base_df.copy()
    if not f.empty:
        start = pd.to_datetime(ss["bf_start"]).date()
        end = pd.to_datetime(ss["bf_end"]).date()
        sel_cats = ss["bf_categories"]
        sv = (ss["bf_search"] or "").strip().lower()
        a_min, a_max = float(ss["bf_min"]), float(ss["bf_max"])

        f = f[(f["date"].dt.date >= start) & (f["date"].dt.date <= end)]
        if sel_cats:
            f = f[f["category"].isin(sel_cats)]
        if sv:
            f = f[f["description"].astype(str).str.lower().str.contains(sv, na=False)]
        f = f[(f["amount"] >= a_min) & (f["amount"] <= a_max)]

    # ---------- KPI ----------
    total = float(f["amount"].sum()) if not f.empty else 0.0
    count = int(len(f))
    avg = float(f["amount"].mean()) if count else 0.0

    k1, k2, k3 = st.columns(3)
    k1.metric(t("kpi.total", lang, default="Total"), f"{total:.2f}")
    k2.metric(t("kpi.operations", lang, default="Operations"), f"{count}")
    k3.metric(t("kpi.average", lang, default="Average"), f"{avg:.2f}")

    st.divider()

    # ---------- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ----------
    st.subheader(t("browse.view_options", lang, default="View options"))
    col_opts, _ = st.columns([1, 3])
    with col_opts:
        rm_dups = st.checkbox(
            t("browse.remove_dups", lang, default="Remove exact duplicates"),
            value=True,
            key="opt_remove_dups",
        )
        newest_first = st.checkbox(
            t("browse.newest_first", lang, default="Newest first"),
            value=True,
            key="opt_newest_first",
        )

    f_disp = prepare_df_for_view(f, remove_dups=rm_dups, newest_first=newest_first)

    # ---------- –¢–∞–±–ª–∏—Ü–∞ (–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ–º –∂–µ fmt) ----------
    f_show = f_disp.copy()
    f_show["date"] = pd.to_datetime(f_show["date"], errors="coerce").dt.strftime(
        "%Y-%m-%d"
    )
    f_show["category"] = f_show["category"].map(fmt)

    col_names = _col_labels(lang)
    f_show = f_show.rename(columns=col_names)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.subheader(t("browse.results", lang, default="Filtered results"))

    st.dataframe(
        f_show,
        width="stretch",
        hide_index=True,
        column_config={
            col_names["amount"]: st.column_config.NumberColumn(
                t("col.amount", lang, default="Amount"), format="%.2f"
            ),
            col_names["date"]: st.column_config.DatetimeColumn(
                t("col.date", lang, default="Date"), format="YYYY-MM-DD"
            ),
        },
    )

    st.divider()
    st.subheader(t("browse.export_data", lang, default="Export Data"))
    csv_bytes = f_disp.to_csv(index=False).encode("utf-8")
    st.download_button(
        label="üì• " + t("common.download_csv", lang, default="Download CSV"),
        data=csv_bytes,
        file_name="expenses_filtered.csv",
        mime="text/csv",
        key="btn_download_csv",
    )
    export_df_to_excel_button(f_disp, filename="expenses_filtered.xlsx")


# ================ Charts ================
elif choice == "charts":
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–ø–∏—Å—å
    st.subheader(t("menu.charts", lang, default="Charts"))
    st.caption(
        "üìà " + t("charts.placeholder", lang, default="Charts page (placeholder)")
    )
    render_flash()
    debug_hud("Charts/pre")

    lang = st.session_state.get("lang", "en")
    cats, cat_labels = categories_ui(lang)
    debug_hud("labels", extra={"labels_lang": lang, "labels_cnt": len(cat_labels)})

    def _fmt_cat(key: object) -> str:
        s = "" if key is None else str(key)
        return cat_labels.get(s, s)

    # 0) –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    db_path = str(st.session_state.get("ACTIVE_DB_PATH", "data/default_expenses.db"))
    df = load_df(db_path, _ver=get_data_version()).copy()
    debug_hud("Charts/post", df)
    df["amount"] = pd.to_numeric(df["amount"], errors="coerce").fillna(0)
    df["date"] = pd.to_datetime(df["date"], errors="coerce")
    df = df.dropna(subset=["date"])

    # –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–∞–º/–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤—ã—à–µ ‚Äî –ø—Ä–∏–º–µ–Ω—è–π—Ç–µ –∏—Ö –∑–¥–µ—Å—å,
    # —á—Ç–æ–±—ã ch_df —É–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É/–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    ch_df = df.copy()

    # 2) –∞–≥—Ä–µ–≥–∞—Ç—ã ‚Äî –ë–ï–ó –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è /100
    # --- By category --------------------------------------------------------------
    if not ch_df.empty:
        bar_df = ch_df.groupby("category", dropna=False, as_index=False).agg(
            total=("amount", "sum")
        )
    else:
        bar_df = pd.DataFrame({"category": [], "total": []})

    # –ø–æ–¥–ø–∏—Å–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è)
    bar_df["cat_label"] = bar_df["category"].map(_fmt_cat)

    # --- By date (–¥–Ω–µ–≤–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è) ---------------------------------------------
    if not ch_df.empty:
        line_df = (
            ch_df.assign(date=ch_df["date"].dt.floor("D"))
            .groupby("date", as_index=False)
            .agg(total=("amount", "sum"))
        )
    else:
        line_df = pd.DataFrame({"date": [], "total": []})

    # 3) sanity-check –Ω–∞ –≤—Ä–µ–º—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å)
    try:
        if not ch_df.empty:
            total_raw = float(ch_df["amount"].sum())
            total_chart = float(bar_df["total"].sum())
            if abs(total_chart - total_raw) > 1e-6:
                st.warning(
                    "Charts total != raw total (–ø—Ä–æ–≤–µ—Ä—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ/—Ñ–∏–ª—å—Ç—Ä—ã)"
                )
    except Exception:
        pass

    # 4) –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò
    st.markdown("#### " + t("dashboard.by_category", lang, default="By category"))
    if not bar_df.empty:
        bar = (
            alt.Chart(bar_df)
            .mark_bar()
            .encode(
                x=alt.X(
                    "cat_label:N", title=t("col.category", lang, default="Category")
                ),
                y=alt.Y(
                    "total:Q",
                    title=t("kpi.total", lang, default="Total"),
                    axis=alt.Axis(format=",.2f"),
                ),
                tooltip=[
                    alt.Tooltip(
                        "cat_label:N", title=t("col.category", lang, default="Category")
                    ),
                    alt.Tooltip(
                        "total:Q",
                        title=t("kpi.total", lang, default="Total"),
                        format=",.2f",
                    ),
                ],
            )
            .properties(height=300)
        )
        st.altair_chart(bar, use_container_width=True)
    else:
        st.info(t("common.no_data", lang, default="No data to display."))

    st.markdown("#### " + t("charts.by_date", lang, default="By date"))
    if not line_df.empty:
        line = (
            alt.Chart(line_df)
            .mark_line(point=True)
            .encode(
                x=alt.X("date:T", title=t("charts.date", lang, default="Date")),
                y=alt.Y(
                    "total:Q",
                    title=t("kpi.total", lang, default="Total"),
                    axis=alt.Axis(format=",.2f"),
                ),
                tooltip=[
                    alt.Tooltip("date:T", title=t("charts.date", lang, default="Date")),
                    alt.Tooltip(
                        "total:Q",
                        title=t("kpi.total", lang, default="Total"),
                        format=",.2f",
                    ),
                ],
            )
            .properties(height=280)
        )
        st.altair_chart(line, use_container_width=True)
    else:
        st.info(t("common.no_data", lang, default="No data to display."))
    # ============================================================================

    # ---------- –≠–∫—Å–ø–∞–Ω–¥–µ—Ä: –∫—Ä—É–≥–æ–≤–∞—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ----------
    with st.expander(
        t("charts.share_by_category_pie", lang, default="Share by category (pie)"),
        expanded=False,
    ):
        pie_df = (
            ch_df.groupby("category", dropna=False)["amount"]
            .sum()
            .rename("amount")
            .reset_index()
            if not ch_df.empty
            else pd.DataFrame({"category": [], "amount": []})
        )

        # –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ
        if not pie_df.empty:
            pie_df["cat_label"] = pie_df["category"].map(_fmt_cat)

        if not pie_df.empty:
            chart = (
                alt.Chart(pie_df)
                .mark_arc()
                .encode(
                    theta=alt.Theta("amount:Q"),
                    color=alt.Color(
                        "cat_label:N",
                        legend=alt.Legend(
                            title=t("col.category", lang, default="Category")
                        ),
                    ),
                    tooltip=[
                        alt.Tooltip(
                            "cat_label:N",
                            title=t("col.category", lang, default="Category"),
                        ),
                        alt.Tooltip(
                            "amount:Q",
                            title=t("kpi.total", lang, default="Total"),
                            format=",.2f",
                        ),
                    ],
                )
                .properties(height=300)
            )
            st.altair_chart(chart, use_container_width=True)
        else:
            st.info(t("common.no_data", lang, default="No data to display."))

    # ---------- –≠–∫—Å–ø–∞–Ω–¥–µ—Ä: –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ ----------
    with st.expander(t("charts.show_data", lang, default="Show data"), expanded=False):
        ch_show = _localize_category_column(ch_df, cat_labels)
        if not ch_show.empty:
            ch_show["date"] = pd.to_datetime(
                ch_show["date"], errors="coerce"
            ).dt.strftime("%Y-%m-%d")
        st.dataframe(
            ch_show,
            width="stretch",
            hide_index=True,
            column_config={
                "amount": st.column_config.NumberColumn(
                    t("col.amount", lang, default="Amount"), format="%.2f"
                ),
                "date": st.column_config.DatetimeColumn(
                    t("col.date", lang, default="Date"), format="YYYY-MM-DD"
                ),
            },
        )

# ================= Settings =================
elif choice == "settings":
    st.header(t("menu.settings", lang, default="Settings"))
    render_flash()

    # —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é en)
    langs = ["en", "fr", "es"]
    current_lang = st.session_state.get("lang", "en")
    idx = langs.index(current_lang) if current_lang in langs else 0

    # —Å–µ–ª–µ–∫—Ç–æ—Ä —è–∑—ã–∫–∞
    new_lang = st.selectbox(
        t("settings.language", current_lang, default="Language"),
        options=langs,
        index=idx,
        key="sidebar_lang_select",
    )

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏
    if new_lang != current_lang:
        st.session_state["lang"] = new_lang
        st.toast(t("language_switched", new_lang, default="Language switched"))
        st.rerun()

# =================== /User / Profile ===================


def limits_path(user: str) -> Path:
    return DATA_DIR / f"{user}_budget_limits.json"


def list_users() -> list[str]:
    DATA_DIR.mkdir(parents=True, exist_ok=True)
    users = sorted(
        p.name.replace("_expenses.db", "") for p in DATA_DIR.glob("*_expenses.db")
    )
    # –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –ø—É—Å—Ç–æ ‚Äî –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º default
    return users or ["default"]


def files_for(user: str) -> tuple[Path, Path]:
    return Path(get_db_path(user)), limits_path(user)


def archive_user(user: str) -> Path:
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª—ã —é–∑–µ—Ä–∞ –≤ –∞—Ä—Ö–∏–≤–Ω—É—é –ø–∞–ø–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∞—Ä—Ö–∏–≤–∞."""
    ts = datetime.now().strftime("%Y%m%d_%H%M%S")
    arch_dir = DATA_DIR / "archives" / f"{user}_{ts}"
    arch_dir.mkdir(parents=True, exist_ok=True)
    dbf, limf = files_for(user)
    if dbf.exists():
        dbf.rename(arch_dir / dbf.name)
    if limf.exists():
        limf.rename(arch_dir / limf.name)
    return arch_dir


def rename_user(old: str, new: str) -> None:
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
    if old == new:
        return
    src_db, src_lim = files_for(old)
    dst_db, dst_lim = files_for(new)
    # –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
    if dst_db.exists() or dst_lim.exists():
        raise FileExistsError("User with this name already exists.")
    if src_db.exists():
        src_db.rename(dst_db)
    if src_lim.exists():
        src_lim.rename(dst_lim)


def switch_user(user: str, toast: str = "Switched"):
    st.session_state["current_user"] = user
    st.session_state["_flash"] = (f"{toast} to '{user}'", "üÜï")
    st.rerun()


# ---- UI ----
st.subheader(t("profile.title", lang, default="User / Profile"))

# —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
current = st.session_state.setdefault("current_user", "default")
users = list_users()
if current not in users:
    current = users[0]
    st.session_state["current_user"] = current

# –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: Active user + Create / rename user + Create
c1, c2, c3 = st.columns([1.2, 1.2, 0.6])

with c1:
    sel = st.selectbox(
        t("profile.active_user", lang, default="Active user"),
        users,
        index=users.index(current),
        key="settings_active_user",
    )

with c2:
    new_name = st.text_input(
        t("profile.create_rename_user", lang, default="Create / rename user"),
        value="",
        placeholder=t("profile.type_name", lang, default="Type name"),
        key="settings_new_name",
    ).strip()

with c3:
    if st.button(
        t("buttons.create", lang, default="Create"), key="settings_btn_create"
    ):
        if not new_name:
            st.warning(
                t("errors.warning_enter_name", lang, default="Please enter a name.")
            )
        elif new_name in users:
            st.warning(
                t(
                    "errors.warning_user_name_exists",
                    lang,
                    default="User with this name already exists.",
                )
            )
        else:
            ensure_db(get_db_path(new_name))
            switch_user(
                new_name,
                toast=t(
                    "profile.toast_created_switched", lang, default="Created & switched"
                ),
            )
            st.cache_data.clear()
            bump_data_version()
            st.rerun()

# –ø–æ–¥–ø–∏—Å—å —Å —Ñ–∞–π–ª–∞–º–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
dbf, limf = files_for(sel)
st.caption(f"DB:  {dbf.name}  ‚Äî  Limits:  {limf.name}")

# –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ + Delete + Rename
c4, c5, c6 = st.columns([0.9, 0.7, 0.7])

with c4:
    do_archive = st.checkbox(
        t("profile.archive_before_delete", lang, default="Archive before delete"),
        value=True,
        key="settings_archive_before_delete",
    )

with c5:
    disable_delete = len(users) <= 1
    delete_help = t(
        "profile.cannot_delete_last",
        lang,
        default="You cannot delete the last remaining user.",
    )

    if disable_delete:
        st.caption(f"‚ÑπÔ∏è {delete_help}")

    if st.button(
        t("profile.delete_user", lang, default="Delete user"),
        disabled=disable_delete,
        help=delete_help,  # –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        key="settings_btn_delete",
    ):
        if disable_delete:
            st.info(
                t(
                    "profile.cannot_delete_last",
                    lang,
                    default="You cannot delete the last remaining user.",
                )
            )
        else:
            try:
                if do_archive:
                    archive_user(sel)
                else:
                    if dbf.exists():
                        dbf.unlink()
                    if limf.exists():
                        limf.unlink()
                remaining = [u for u in list_users() if u != sel]
                switch_user(
                    remaining[0] if remaining else "default",
                    toast=t(
                        "profile.toast_deleted_switched",
                        lang,
                        default="Deleted, switched",
                    ),
                )
                st.cache_data.clear()
                bump_data_version()
                st.rerun()
            except Exception as e:
                st.error(t("profile.deletion_failed", lang, default="Deletion failed."))
                st.exception(e)

with c6:
    if st.button(
        t("profile.rename", lang, default="Rename"), key="settings_btn_rename"
    ):
        if not new_name:
            st.warning(
                t(
                    "errors.warning_enter_new_name",
                    lang,
                    default="Please enter a new name.",
                )
            )
        elif new_name in users:
            st.warning(
                t(
                    "errors.warning_user_name_exists",
                    lang,
                    default="User with this name already exists.",
                )
            )
        else:
            try:
                rename_user(sel, new_name)
                switch_user(
                    new_name,
                    toast=t(
                        "profile.toast_renamed_switched",
                        lang,
                        default="Renamed & switched",
                    ),
                )
                st.cache_data.clear()
                bump_data_version()
                st.rerun()
            except Exception as e:
                st.error(t("profile.rename_failed", lang, default="Rename failed."))
                st.exception(e)

# –±—ã—Å—Ç—Ä—ã–π —Å–≤–∏—Ç—á, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ select –∏–∑–º–µ–Ω—ë–Ω
if sel != current and st.session_state.get("settings_active_user") == sel:
    switch_user(sel, toast=t("profile.toast_switched", lang, default="Switched"))
    st.cache_data.clear()
    bump_data_version()
    st.rerun()

# --- Monthly limits ----------------------------------------------------------


def _active_user() -> str:
    return get_active_user()  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è


# –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏: DB –∫–∞–∫ str, limits –∫–∞–∫ Path (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
def _active_paths() -> tuple[str, Path]:
    user = _active_user()
    db_path_str = str(get_db_path(user))
    limits_file = Path("data") / f"{user}_budget_limits.json"
    return db_path_str, limits_file


# –ù–∞–¥—ë–∂–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–¥–∞–∂–µ –µ—Å–ª–∏ –ë–î –ø—É—Å—Ç–∞—è)
def _categories_for_editor(db_path: str) -> list[str]:
    try:
        cats = list_categories(db_path=db_path) or []
    except Exception:
        cats = []
    base = {"food", "transport", "groceries", "utilities", "entertainment", "other"}
    return sorted(set(cats) | base)


# –ö–ª—é—á –º–µ—Å—è—Ü–∞
def _mk(d: date) -> str:
    return month_key(d)


# –ß—Ç–µ–Ω–∏–µ/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ JSON
def _load_limits(mk: str, path: Path) -> dict[str, float]:
    if not path.exists():
        return {}
    try:
        data = json.loads(path.read_text(encoding="utf-8"))
        raw = data.get(mk, {}) or {}
        return {k: float(v) for k, v in raw.items()}
    except Exception:
        return {}


def _save_limits(mk: str, values: dict[str, float], path: Path) -> None:
    data: dict = {}
    if path.exists():
        try:
            data = json.loads(path.read_text(encoding="utf-8")) or {}
        except Exception:
            data = {}
    data[mk] = values
    path.parent.mkdir(parents=True, exist_ok=True)
    path.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")


def current_limits_month() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Å—è—Ü –¥–ª—è –±–ª–æ–∫–∞ Limits –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM."""
    src = (
        st.session_state.get("limits_month")  # –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –º–µ—Å—è—Ü –≤ UI
        or st.session_state.get("dash_start")  # –∏–Ω–∞—á–µ –¥–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ Dashboard
        or date.today().replace(day=1)  # fallback: –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    )
    if isinstance(src, str):
        try:
            src = datetime.fromisoformat(src).date()
        except ValueError:
            src = date.today().replace(day=1)
    return src.strftime("%Y-%m")


# ---------------- UI ----------------

st.subheader(t("limits.monthly_title", lang, default="Monthly limits"))

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
db_path_str, limits_file = _active_paths()
st.caption(f"DB: {db_path_str} ‚Äî Limits: {limits_file.name}")

# 1) –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π key –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
month = st.date_input(
    t("limits.month", lang, default="Month"),
    value=date.today().replace(day=1),
    format="YYYY/MM/DD",
    key="limits_month",
)
mk = _mk(month)

# 2) –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–º–∏—Ç—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
cats = _categories_for_editor(db_path_str)
limits_now = _load_limits(mk, limits_file)

# üÜï –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è UI + —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É
_, cat_labels = categories_ui(lang)  # —É–∂–µ –µ—Å—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ, —Å–ª–æ–≤–∞—Ä—å {key -> label}
# –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö cats (–Ω–∞ —Å–ª—É—á–∞–π —Ä–µ–¥–∫–∏—Ö –∫–ª—é—á–µ–π)
for c in cats:
    cat_labels.setdefault(c, t(f"categories.{c}", lang, default=c))
cats = sorted(cats, key=lambda c: cat_labels[c].lower())

# 3) –†–µ–¥–∞–∫—Ç–æ—Ä –ª–∏–º–∏—Ç–æ–≤
user = current_user()
ym = current_limits_month()

st.write(
    f"{t('profile.title', lang, default='User / Profile').split(' / ')[0]}: {user} ‚Ä¢ "
    f"{t('limits.month', lang, default='Month')}: {ym}"
)

values: dict[str, float] = {}
for cat in cats:
    # üÜï –ø–æ–¥–ø–∏—Å—å –ø–æ–ª—è ‚Äî –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è
    label = cat_labels.get(cat, cat)
    values[cat] = st.number_input(
        label,
        min_value=0.0,
        step=10.0,
        value=float(limits_now.get(cat, 0.0)),
        key=f"limit_{ym}_{cat}",
    )

# 4) –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (Save / Clear)
col1, col2 = st.columns(2)
with col1:
    if st.button(t("buttons.save", lang, default="Save"), key=f"save_limits_{mk}"):
        _save_limits(mk, values, limits_file)
        st.session_state["_flash"] = (t("saved", lang, default="Saved!"), "‚úÖ")
        st.cache_data.clear()
        st.rerun()

with col2:
    if st.button(
        t("limits.clear_month", lang, default="Clear month limits"),
        key=f"clear_limits_{mk}",
    ):
        _save_limits(mk, {}, limits_file)
        st.session_state["_flash"] = ("Limits cleared", "üóëÔ∏è")
        st.cache_data.clear()
        st.rerun()


# --- Import / Export CSV ------------------------------------------------------
mk = st.session_state.get("current_limits_month", month_key(date.today()))
current_user = st.session_state.get("current_user", "default")

# —Å–æ–±–µ—Ä—ë–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–æ—Ä–º—ã (–º–∏–∫—Ä–æ-—Ö–µ–ª–ø–µ—Ä –≤—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ä–∞–Ω–µ–µ)
current_limits = _collect_limits_from_form(prefix=f"limit_{mk}_")

exp_col1, exp_col2 = st.columns(2)

# --- Export CSV
with exp_col1:
    csv_bytes = limits_to_csv_bytes(current_limits)
    st.download_button(
        label=t("download_csv", lang, default="Download CSV"),
        data=csv_bytes,
        file_name=f"{current_user}_{mk}_limits.csv",
        mime="text/csv",
        key=f"dl_limits_csv_{current_user}_{mk}",
        help=t("download_csv", lang, default="Download CSV"),
    )

# --- Import CSV
with exp_col2:
    up = st.file_uploader(
        t("limits.import_csv", lang, default="Upload CSV"),
        type=["csv"],
        key=f"ul_limits_csv_{current_user}_{mk}",
        help=t("limits.import", lang, default="Upload CSV"),
    )

    if up is not None:
        try:
            uploaded_bytes = up.read()
            imported_limits = csv_bytes_to_limits(uploaded_bytes)

            # –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
            for cat, val in imported_limits.items():
                st.session_state[f"limit_{mk}_{cat}"] = float(val)

            # –õ–û–ì –ò–ó–ú–ï–ù–ï–ù–ò–ô: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º ¬´—á—Ç–æ –±—ã–ª–æ –≤ —Ñ–æ—Ä–º–µ¬ª vs ¬´—á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏¬ª
            append_audit_row(old=current_limits, new=imported_limits)

            # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ + –º—è–≥–∫–∏–π rerun
            st.session_state["_flash"] = (t("saved", lang, default="Saved!"), "‚úÖ")
            st.cache_data.clear()
            st.rerun()

        except Exception:
            st.error(t("csv_import_failed", lang, default="CSV import failed"))

# ---- Change log (session) ----------------------------------------------------
st.markdown(f"#### {t('change_log', lang, default='Change log (session)')}")

log_col1, log_col2, log_col3, log_col4 = st.columns(4)

audit_data = get_audit()  # —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞ –∑–∞ —Å–µ—Å—Å–∏—é

with log_col1:
    st.download_button(
        label=t("download_json", lang, default="Download JSON"),
        data=audit_to_json_bytes(audit_data),
        file_name=f"audit_{current_user}_{mk}.json",
        mime="application/json",
        key=f"dl_audit_json_{current_user}_{mk}",
    )

with log_col2:
    st.download_button(
        label=t("download_csv", lang, default="Download CSV"),
        data=audit_to_csv_bytes(audit_data),
        file_name=f"audit_{current_user}_{mk}.csv",
        mime="text/csv",
        key=f"dl_audit_csv_{current_user}_{mk}",
    )

with log_col4:
    if st.button(
        t("clear_audit", lang, default="Clear audit"),
        key=f"btn_clear_audit_{current_user}_{mk}",
    ):
        st.session_state.setdefault("__limits_audit__", [])
        st.session_state["__limits_audit__"].clear()
        st.success(t("cleared", lang, default="Cleared!"))

# 6) –ü–æ–¥—Å–∫–∞–∑–∫–∏ (3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—Ü–∞)
with st.expander("Suggestions (last 3 months)"):
    df_hist = get_expenses_df(db_path=db_path_str)
    recs = []
    if df_hist is not None and not df_hist.empty:
        df_hist["ym"] = pd.to_datetime(df_hist["date"]).dt.strftime("%Y-%m")
        recent = df_hist[df_hist["ym"] <= mk].copy()
        recent = recent.sort_values("date")
        piv = recent.pivot_table(
            index="ym", columns="category", values="amount", aggfunc="sum"
        ).sort_index()
        user = st.session_state.get("current_user", "default")
        limits_map = load_monthly_limits(
            limits_path_for(user)
        )  # dict: { "YYYY-MM": {cat: val, ...}, ... }
        cur_limits = limits_map.get(mk, {})
        for cat in sorted(set(list(piv.columns) + list(cur_limits.keys()))):
            avg3 = float(piv.get(cat, pd.Series(dtype=float)).tail(3).mean() or 0.0)
            lim = float(cur_limits.get(cat, 0.0))
            if avg3 == 0 and lim == 0:
                continue
            if avg3 > lim * 1.1:
                recs.append(
                    f"‚Üë {cat}: avg last 3 mo {avg3:.2f} > limit {lim:.2f} ‚Üí "
                    f"consider +{avg3-lim:.2f}"
                )
            elif lim > 0 and lim > avg3 * 1.25:
                recs.append(
                    f"‚Üì {cat}: limit {lim:.2f} >> avg {avg3:.2f} ‚Üí consider ‚àí{lim-avg3:.2f}"
                )
    if recs:
        for r in recs:
            st.write("‚Ä¢ " + r)
    else:
        st.caption("No suggestions yet.")
