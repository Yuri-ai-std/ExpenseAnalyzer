import streamlit as st
import sqlite3
import csv
from io import StringIO, BytesIO
from pathlib import Path
from datetime import datetime
import pandas as pd

from messages import messages
from db import (
    get_expenses_df,
    add_expense,
    list_categories as _list_categories,
    list_categories,
)

import pandas as pd
from datetime import date, timedelta
from project import check_budget_limits
from datetime import datetime
from datetime import date as _date
import altair as alt

import json
from datetime import date
from utils import load_monthly_limits, save_monthly_limits, month_key
from db import list_categories
from project import check_budget_limits


def export_df_to_excel_button(df: pd.DataFrame, filename: str = "expenses.xlsx"):
    if df.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–≤–∏–∂–æ–∫
    engine = None
    try:
        import xlsxwriter  # noqa: F401

        engine = "xlsxwriter"
    except ImportError:
        try:
            import openpyxl  # noqa: F401

            engine = "openpyxl"
        except ImportError:
            st.error(
                "–î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–∞–∫–µ—Ç–æ–≤: "
                "`pip install XlsxWriter` –∏–ª–∏ `pip install openpyxl`."
            )
            return

    buf = BytesIO()
    with pd.ExcelWriter(buf, engine=engine) as writer:
        df.to_excel(writer, index=False, sheet_name="Expenses")

    st.download_button(
        label="‚¨áÔ∏è Download Excel",
        data=buf.getvalue(),
        file_name=filename,
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )


def prepare_df_for_view(
    df: pd.DataFrame,
    *,
    remove_dups: bool = True,
    newest_first: bool = True,
) -> pd.DataFrame:
    """–û—á–∏—â–∞–µ—Ç –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/–º–µ—Ç—Ä–∏–∫."""
    d = df.copy()
    if remove_dups:
        d = d.drop_duplicates(
            subset=["date", "category", "amount", "description"],
            keep="last",
        )
    d["date"] = pd.to_datetime(d["date"], errors="coerce")
    d = d.sort_values("date", ascending=not newest_first).reset_index(drop=True)
    return d


def _normalize_limits_json(obj: dict) -> dict[str, dict[str, float]]:
    """
    –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ö–æ–¥ –∫ —Ñ–æ—Ä–º–∞—Ç—É:
      {"YYYY-MM": {"food": 200.0, "transport": 50.0, ...}, ...}
    –ë—Ä–æ—Å–∞–µ–º ValueError –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.
    """
    if not isinstance(obj, dict):
        raise ValueError("Root must be an object")
    out: dict[str, dict[str, float]] = {}
    for month_key, limits in obj.items():
        if not isinstance(month_key, str) or len(month_key) != 7 or month_key[4] != "-":
            raise ValueError(f"Invalid month key: {month_key!r}")
        if not isinstance(limits, dict):
            raise ValueError(
                f"Month {month_key} must map to an object of category->limit"
            )
        inner: dict[str, float] = {}
        for cat, val in limits.items():
            if not isinstance(cat, str) or not cat.strip():
                continue
            try:
                f = float(val)
            except Exception:
                continue
            if f >= 0:
                inner[cat.strip()] = f
        out[month_key] = inner
    return out


def _month_key(date_value):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ YYYY-MM –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Å—è—á–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
    """
    return date_value.strftime("%Y-%m")


AUDIT_FILE = Path("tools/limits_audit.csv")  # –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –ø—É—Ç—å –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
AUDIT_DIR = Path("data")
AUDIT_DIR.mkdir(exist_ok=True)
AUDIT_LOG_FILE = (
    AUDIT_DIR / "audit.jsonl"
)  # –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ (–ø–æ –∑–∞–ø–∏—Å–∏ –≤ —Å—Ç—Ä–æ–∫–µ)


def _limits_to_csv_bytes(limits: dict[str, float]) -> bytes:
    """–°–ª–æ–≤–∞—Ä—å –ª–∏–º–∏—Ç–æ–≤ -> CSV (bytes)."""
    df = pd.DataFrame(
        [(k, float(v)) for k, v in (limits or {}).items()],
        columns=["category", "limit"],
    )
    return df.to_csv(index=False).encode("utf-8")


def _parse_limits_csv(file) -> dict[str, float]:
    """CSV -> —Å–ª–æ–≤–∞—Ä—å –ª–∏–º–∏—Ç–æ–≤ {category: limit}."""
    df = pd.read_csv(file)
    out: dict[str, float] = {}
    for _, row in df.iterrows():
        if pd.isna(row.get("category")):
            continue
        cat = str(row["category"]).strip()
        try:
            out[cat] = float(row["limit"])
        except Exception:
            continue
    return out


def _append_audit_row(kind: str, month_key: str, before: dict, after: dict) -> None:
    """–ú–∏–Ω–∏-–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ª–∏–º–∏—Ç–æ–≤ –≤ session_state."""
    log = st.session_state.setdefault("audit", [])
    log.append(
        {
            "ts": datetime.now().isoformat(timespec="seconds"),
            "kind": kind,
            "month": month_key,
            "before": before,
            "after": after,
        }
    )


AUDIT_DIR = Path("data")
AUDIT_DIR.mkdir(exist_ok=True)
AUDIT_LOG_FILE = (
    AUDIT_DIR / "audit.jsonl"
)  # –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ (–ø–æ –∑–∞–ø–∏—Å–∏ –≤ —Å—Ç—Ä–æ–∫–µ)


def _get_audit() -> list[dict]:
    """–í–µ—Ä–Ω—ë—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞ –∏–∑ session_state."""
    return st.session_state.get("audit", [])


def _audit_to_json_bytes(log: list[dict]) -> bytes:
    """–ê—É–¥–∏—Ç -> JSON bytes (–¥–ª—è download_button)."""
    return json.dumps(log, ensure_ascii=False, indent=2).encode("utf-8")


def _audit_to_csv_bytes(log: list[dict]) -> bytes:
    """
    –ê—É–¥–∏—Ç -> CSV bytes. –®–∞–ø–∫–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ –≤—Å–µ–º
    –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω—ã–º –≤ before/after –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
    """
    # 1) —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω—ã–µ –≤ before/after
    cats: list[str] = []
    for row in log:
        b = row.get("before", {}) or {}
        a = row.get("after", {}) or {}
        cats.extend(b.keys())
        cats.extend(a.keys())

    # —Å—Ç–∞–±–∏–ª—å–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
    cats = sorted(set(cats))

    # 2) —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —à–∞–ø–∫—É CSV
    fieldnames = (
        ["ts", "kind", "month"]
        + [f"before_{c}" for c in cats]
        + [f"after_{c}" for c in cats]
    )

    # 3) –∑–∞–ø–∏—Å—å CSV –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã–π –±—É—Ñ–µ—Ä
    buf = StringIO()
    w = csv.DictWriter(buf, fieldnames=fieldnames)
    w.writeheader()

    for row in log:
        b = row.get("before", {}) or {}
        a = row.get("after", {}) or {}
        out = {
            "ts": row.get("ts"),
            "kind": row.get("kind"),
            "month": row.get("month"),
        }
        # –∑–∞–ø–æ–ª–Ω—è–µ–º ¬´–¥–æ¬ª
        for c in cats:
            out[f"before_{c}"] = b.get(c, 0)
        # –∏ ¬´–ø–æ—Å–ª–µ¬ª
        for c in cats:
            out[f"after_{c}"] = a.get(c, 0)
        w.writerow(out)

    return buf.getvalue().encode("utf-8")


def _persist_audit_append(entry: dict) -> None:
    """–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–∏—Å–∞—Ç—å –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞ –Ω–∞ –¥–∏—Å–∫ (JSONL)."""
    with AUDIT_LOG_FILE.open("a", encoding="utf-8") as f:
        f.write(json.dumps(entry, ensure_ascii=False) + "\n")


# ===== –õ–û–ì –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê =====
print(f"\nüîÑ Streamlit –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")


# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====
@st.cache_data(ttl=60)
def load_df(start: str | None = None, end: str | None = None) -> pd.DataFrame:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ DataFrame.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: start, end ‚Äî —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD' –∏–ª–∏ None.
    """
    df = get_expenses_df(start_date=start, end_date=end)
    expected = ["date", "category", "amount", "description"]
    for col in expected:
        if col not in df.columns:
            df[col] = pd.NA
    df["date"] = pd.to_datetime(df["date"], errors="coerce")
    df["amount"] = pd.to_numeric(df["amount"], errors="coerce")
    return df.dropna(subset=["date", "amount"])


@st.cache_data(ttl=120)
def get_categories() -> list[str]:
    """–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î (distinct), –∫—ç—à–∏—Ä—É–µ–º –Ω–∞ 2 –º–∏–Ω."""
    try:
        with sqlite3.connect("expenses.db") as conn:
            rows = conn.execute("SELECT DISTINCT category FROM expenses").fetchall()
        return [r[0] for r in rows if r and r[0]]
    except Exception:
        return []


# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–∞–Ω—Å–∞ ---
if "lang" not in st.session_state:
    st.session_state["lang"] = "en"

msgs = messages[st.session_state["lang"]]

st.set_page_config(page_title="ExpenseAnalyzer", layout="wide")


def _fetch_categories() -> list[str]:
    # 1) –µ—Å–ª–∏ –µ—Å—Ç—å list_categories –≤ db.py ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ
    try:
        from db import (
            list_categories as _list_categories,
        )  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è

        cats = _list_categories()
        if cats:
            return cats
    except Exception:
        pass
    # 2) –∏–Ω–∞—á–µ —Å–æ–±–µ—Ä—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
    try:
        df = get_expenses_df()
        if "category" in df.columns and not df.empty:
            return sorted(map(str, df["category"].dropna().unique().tolist()))
    except Exception:
        pass
    # 3) –¥–µ—Ñ–æ–ª—Ç
    return ["food", "transport", "health", "entertainment", "other"]


# --- –ú–µ–Ω—é ---
menu = ["Dashboard", "Add Expense", "Browse & Filter", "Charts", "Settings"]
choice = st.sidebar.radio("Menu", menu)

if choice == "Dashboard":
    st.title(msgs.get("dashboard", "Dashboard"))

    # ----- –ü–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü -----
    today = date.today()
    month_start = today.replace(day=1)

    c1, c2, c3 = st.columns([1, 1, 0.5])
    with c1:
        start_d = st.date_input(
            "Start", value=st.session_state.get("dash_start", month_start)
        )
    with c2:
        end_d = st.date_input("End", value=st.session_state.get("dash_end", today))
    with c3:
        refresh = st.button("Apply")

    # –∑–∞–ø–æ–º–Ω–∏–º –≤—ã–±–æ—Ä
    if refresh:
        st.session_state["dash_start"] = start_d
        st.session_state["dash_end"] = end_d

    start_s = (st.session_state.get("dash_start", month_start)).strftime("%Y-%m-%d")
    end_s = (st.session_state.get("dash_end", today)).strftime("%Y-%m-%d")

    # ----- –î–∞–Ω–Ω—ã–µ -----
    raw_df = load_df(start_s, end_s)
    if raw_df.empty:
        st.info(msgs.get("no_expenses_found", "No expenses found for selected period."))
        st.stop()

    # –û—á–∏—Å—Ç–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ —Ö–µ–ª–ø–µ—Ä
    df = prepare_df_for_view(raw_df, remove_dups=True, newest_first=True)

    # ----- KPI -----
    total = float(df["amount"].sum())
    count = len(df)
    avg = float(df["amount"].mean())
    cats = int(df["category"].nunique())

    k1, k2, k3, k4 = st.columns(4)
    k1.metric("Total", f"{total:.2f}")
    k2.metric("Operations", f"{count}")
    k3.metric("Average", f"{avg:.2f}")
    k4.metric("Categories", f"{cats}")

    st.divider()

    # ----- –¢–æ–ø –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π -----
    st.subheader("Last operations")
    show_cols = ["date", "category", "amount", "description"]
    st.dataframe(
        df.sort_values("date", ascending=False)[show_cols].head(5),
        use_container_width=True,
        hide_index=True,
    )

    # ----- –î–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º -----
    st.subheader("By category")
    cat_totals = (
        df.groupby("category", dropna=False)["amount"]
        .sum()
        .sort_values(ascending=False)
        .rename("total")
        .to_frame()
    )
    st.bar_chart(cat_totals, use_container_width=True)

elif choice == "Add Expense":
    st.title(msgs.get("add_expense", "Add Expense"))

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î
    try:
        conn = sqlite3.connect("expenses.db")
        cats = [
            row[0]
            for row in conn.execute("SELECT DISTINCT category FROM expenses").fetchall()
        ]
        conn.close()
    except Exception:
        cats = []  # fallback, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞

    with st.form("add_expense_form", clear_on_submit=True):
        d = st.date_input(msgs.get("date", "Date"))
        date_err = st.empty()

        # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –Ω–∞ selectbox —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–≤–æ–¥–∞
        category = st.selectbox(
            msgs.get("category", "Category"),
            options=cats if cats else ["(Enter new category)"],
            index=0 if cats else None,
            placeholder="Choose or type a category",
        )
        category_err = st.empty()

        amount = st.number_input(
            msgs.get("amount", "Amount"),
            min_value=0.0,
            format="%.2f",
        )
        amount_err = st.empty()

        note = st.text_area(msgs.get("description", "Description"))

        submit = st.form_submit_button(msgs.get("submit", "Submit"))

        if submit:
            has_error = False

            # –î–∞—Ç–∞
            if not d:
                date_err.error(msgs.get("error_date", "Please select a date."))
                has_error = True
            else:
                date_err.empty()

            # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            cat_norm = (category or "").strip()
            if not cat_norm or cat_norm == "(Enter new category)":
                category_err.error(
                    msgs.get("error_category", "Please enter a valid category.")
                )
                has_error = True
            else:
                category_err.empty()

            # –°—É–º–º–∞
            amt = float(amount)
            if amt <= 0:
                amount_err.error(
                    msgs.get("error_amount", "Amount must be greater than zero.")
                )
                has_error = True
            else:
                amount_err.empty()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            if not has_error:
                note_norm = (note or "").strip() or None
                try:
                    add_expense(
                        date=str(d),
                        category=cat_norm,
                        amount=amt,
                        description=note_norm,
                    )
                    st.success(msgs.get("expense_added", "Expense added successfully!"))
                    st.toast(
                        msgs.get("expense_added", "Expense added successfully!"),
                        icon="‚úÖ",
                    )
                    st.rerun()
                except Exception as ex:
                    st.error(msgs.get("save_error", "Could not save expense."))
                    st.exception(ex)

elif choice == "Browse & Filter":
    st.title(msgs.get("browse_filter", "Browse & Filter"))

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    base_df = get_expenses_df()
    if base_df.empty:
        st.info(msgs.get("no_expenses_found", "No expenses found."))
        st.stop()

    df = base_df.copy()
    if not pd.api.types.is_datetime64_any_dtype(df["date"]):
        df["date"] = pd.to_datetime(df["date"])

    # –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã
    cats_all = sorted(get_categories() or df["category"].dropna().unique().tolist())
    min_date = df["date"].min().date()
    max_date = df["date"].max().date()
    min_amt = float(df["amount"].min())
    max_amt = float(df["amount"].max())

    # --- –§–∏–ª—å—Ç—Ä—ã ---
    with st.form("filter_form", clear_on_submit=False):
        c1, c2 = st.columns(2)
        with c1:
            start = st.date_input(
                "Start", value=min_date, min_value=min_date, max_value=max_date
            )
        with c2:
            end = st.date_input(
                "End", value=max_date, min_value=min_date, max_value=max_date
            )

        c3, c4 = st.columns([2, 1])
        with c3:
            sel_cats = st.multiselect(
                "Category",
                options=cats_all,
                default=cats_all,
                placeholder="Select categories...",
            )
        with c4:
            search = st.text_input("Search (description contains)", value="")

        a1, a2 = st.columns(2)
        with a1:
            amt_min = st.number_input(
                "Min amount", value=float(f"{min_amt:.2f}"), step=1.0
            )
        with a2:
            amt_max = st.number_input(
                "Max amount", value=float(f"{max_amt:.2f}"), step=1.0
            )

        fcol1, fcol2 = st.columns([1, 1])
        run = fcol1.form_submit_button(msgs.get("apply", "Apply"))
        reset = fcol2.form_submit_button(msgs.get("reset", "Reset"))

    if reset:
        st.cache_data.clear()
        st.rerun()

    # --- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
    f = df.copy()
    f = f[(f["date"].dt.date >= start) & (f["date"].dt.date <= end)]
    if sel_cats:
        f = f[f["category"].isin(sel_cats)]
    if search.strip():
        s = search.strip().lower()
        f = f[f["description"].fillna("").str.lower().str.contains(s)]
    f = f[(f["amount"] >= amt_min) & (f["amount"] <= amt_max)]

    if f.empty:
        st.warning(
            msgs.get("no_expenses_found", "No expenses found for selected filters.")
        )
        st.stop()

    # --- KPI ---
    k1, k2, k3 = st.columns(3)
    with k1:
        st.metric(msgs.get("total", "Total"), f"{f['amount'].sum():.2f}")
    with k2:
        st.metric(msgs.get("operations", "Operations"), len(f))
    with k3:
        st.metric(msgs.get("average", "Average"), f"{f['amount'].mean():.2f}")

    st.divider()

    # --- –û–ø—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/–æ—á–∏—Å—Ç–∫–∏ ---
    st.subheader("View options")
    col_opts, _ = st.columns([1, 3])
    with col_opts:
        rm_dups = st.checkbox(
            "Remove exact duplicates",
            value=True,
            help="–£–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ (date, category, amount, description).",
        )
        newest_first = st.checkbox("Newest first", value=True)

    # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫ –ø–æ–∫–∞–∑—É ---
    f_disp = f.copy()

    # 1) –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—á–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if rm_dups:
        f_disp = f_disp.drop_duplicates(
            subset=["date", "category", "amount", "description"],
            keep="last",
        )

    # 2) –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
    f_disp["date"] = pd.to_datetime(f_disp["date"], errors="coerce")
    f_disp = f_disp.sort_values("date", ascending=not newest_first).reset_index(
        drop=True
    )

    # 3) –ö–æ–ø–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ø–æ–∫–∞–∑–∞ –¥–∞—Ç –∫–∞–∫ YYYY-MM-DD
    f_show = f_disp.copy()
    f_show["date"] = f_show["date"].dt.strftime("%Y-%m-%d")

    # --- –¢–∞–±–ª–∏—Ü–∞ ---
    st.dataframe(
        f_show,
        use_container_width=True,
        hide_index=True,
        column_config={
            "amount": st.column_config.NumberColumn("Amount", format="%.2f"),
            "date": st.column_config.DatetimeColumn("Date", format="YYYY-MM-DD"),
        },
    )

    st.divider()

    # --- –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö ---
    st.subheader("Export Data")
    csv_bytes = f_disp.to_csv(index=False).encode("utf-8")
    st.download_button(
        label="üì• Download CSV",
        data=csv_bytes,
        file_name="expenses_filtered.csv",
        mime="text/csv",
    )

    export_df_to_excel_button(f_disp, filename="expenses_filtered.xlsx")

elif choice == "Charts":
    st.title(msgs.get("charts", "Charts"))

    # ---- –ö–æ–Ω—Ç—Ä–æ–ª—ã –ø–µ—Ä–∏–æ–¥–∞ ----
    colp1, colp2, colp3 = st.columns([1.4, 1.4, 1])
    start_c = colp1.date_input(
        msgs.get("start", "Start"),
        value=_date(_date.today().year, _date.today().month, 1),
    )
    end_c = colp2.date_input(msgs.get("end", "End"), value=_date.today())
    apply_c = colp3.button(msgs.get("apply", "Apply"), use_container_width=True)

    # –ì—Ä—É–∑–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥—É
    df_raw = load_df(str(start_c), str(end_c)) if apply_c or True else load_df()
    if df_raw.empty:
        st.info(msgs.get("no_expenses_found", "No expenses found for selected period."))
        st.stop()

    # –û—á–∏—â–∞–µ–º/–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ —É–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ–∫–∞–∑–∞
    df = prepare_df_for_view(df_raw, remove_dups=True)

    # ---- –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ----
    cats_all = sorted(df["category"].astype(str).unique().tolist())
    sel_cats = st.multiselect(
        msgs.get("category", "Category"),
        options=cats_all,
        default=cats_all,
    )
    if sel_cats:
        df = df[df["category"].isin(sel_cats)]
    if df.empty:
        st.info(msgs.get("no_expenses_found", "No expenses found for selected period."))
        st.stop()

    st.divider()

    # =========================
    #  A) –ë–∞—Ä-—á–∞—Ä—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    # =========================
    st.subheader(msgs.get("by_category", "By category"))
    cat_sum = (
        df.groupby("category", as_index=False)
        .agg(amount=("amount", "sum"))  # <- –ø–æ–ª—É—á–∞–µ–º DataFrame —Å –∫–æ–ª–æ–Ω–∫–æ–π amount
        .sort_values(
            "amount", ascending=False
        )  # <- —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ DataFrame (–±–µ–∑ 'by=' –¥–ª—è Series)
    )

    cat_chart = (
        alt.Chart(cat_sum)
        .mark_bar()
        .encode(
            x=alt.X("category:N", title=msgs.get("category", "Category"), sort="-y"),
            y=alt.Y("amount:Q", title=msgs.get("total", "Total")),
            tooltip=[
                alt.Tooltip("category:N", title=msgs.get("category", "Category")),
                alt.Tooltip("amount:Q", title=msgs.get("total", "Total"), format=".2f"),
            ],
        )
        .properties(height=360)
    )
    st.altair_chart(cat_chart, use_container_width=True)

    # =========================
    #  B) –õ–∏–Ω–∏—è: –¥–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º
    # =========================
    st.subheader(msgs.get("by_date", "By date"))
    daily = (
        df.groupby("date", as_index=False)
        .agg(amount=("amount", "sum"))  # DataFrame
        .sort_values("date")  # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
    )

    line_chart = (
        alt.Chart(daily)
        .mark_line(point=True)
        .encode(
            x=alt.X("date:T", title=msgs.get("date", "Date")),
            y=alt.Y("amount:Q", title=msgs.get("total", "Total")),
            tooltip=[
                alt.Tooltip("date:T", title=msgs.get("date", "Date")),
                alt.Tooltip("amount:Q", title=msgs.get("total", "Total"), format=".2f"),
            ],
        )
        .properties(height=360)
    )
    st.altair_chart(line_chart, use_container_width=True)

    # =========================
    #  C) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) Pie-chart
    # =========================
    with st.expander(msgs.get("share_by_category", "Share by category (pie)")):
        share = cat_sum.copy()
        total_sum = float(share["amount"].sum()) or 1.0
        share["share"] = share["amount"] / total_sum

        pie = (
            alt.Chart(share)
            .mark_arc(innerRadius=60)  # –ø–æ–Ω—á–∏–∫–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
            .encode(
                theta=alt.Theta("amount:Q"),
                color=alt.Color(
                    "category:N",
                    legend=alt.Legend(title=msgs.get("category", "Category")),
                ),
                tooltip=[
                    alt.Tooltip("category:N", title=msgs.get("category", "Category")),
                    alt.Tooltip(
                        "amount:Q", title=msgs.get("total", "Total"), format=",.2f"
                    ),
                    alt.Tooltip(
                        "share:Q", title=msgs.get("share", "Share"), format=".1%"
                    ),
                ],
            )
            .properties(height=320)
        )
        st.altair_chart(pie, use_container_width=True)

    # =========================
    #  D) –ü–æ–∫–∞–∑ —Ç–∞–±–ª–∏—Ü—ã (–±–µ–∑ –¥—É–±–ª–µ–π)
    # =========================
    with st.expander(msgs.get("show_table", "Show data")):
        st.dataframe(
            (df.sort_values("date", ascending=False)).reset_index(drop=True),
            use_container_width=True,
            hide_index=True,
            column_config={
                "amount": st.column_config.NumberColumn(
                    msgs.get("amount", "Amount"), format="%.2f"
                ),
                "date": st.column_config.DatetimeColumn(
                    msgs.get("date", "Date"), format="YYYY-MM-DD"
                ),
            },
        )


elif choice == "Settings":
    st.title(msgs.get("settings", "Settings"))

    # ---- flash –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ ----
    flash = st.session_state.pop("flash", None)
    if flash:
        kind, text = flash  # "success"|"info"|"warning"|"error"
        {
            "success": st.success,
            "info": st.info,
            "warning": st.warning,
            "error": st.error,
        }.get(kind, st.info)(text)

    # ---- —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ----
    lang = st.selectbox(
        "Language",
        options=["en", "fr", "es"],
        index=["en", "fr", "es"].index(st.session_state.get("lang", "en")),
        help="UI language",
    )
    st.session_state["lang"] = lang
    msgs = messages[lang]

    st.divider()

    # ---- –º–µ—Å—è—Ü –∏ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ----
    col1, col2 = st.columns(2)
    with col1:
        month = st.date_input(
            msgs.get("month", "Month"),
            value=date.today().replace(day=1),
            format="YYYY/MM/DD",
        )
        mk = _month_key(month)  # –Ω–∞–ø—Ä–∏–º–µ—Ä "2025-08"

    with col2:
        try:
            categories = list_categories() or []
        except Exception:
            categories = []
        st.caption(
            msgs.get("categories", "Categories")
            + ": "
            + (", ".join(categories) if categories else "‚Äî")
        )

    # ---- —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã (dict[str, dict[str, float]]) ----
    all_limits = load_monthly_limits() or {}
    current = all_limits.get(mk, {})

    # ---- —Ä–µ–¥–∞–∫—Ç–æ—Ä –ª–∏–º–∏—Ç–æ–≤ ----
    st.subheader(msgs.get("edit_limits", "Edit Monthly Limits"))
    if not categories:
        st.info("No categories found in DB ‚Äî editor shows sample ones.")
        categories = [
            "food",
            "transport",
            "groceries",
            "utilities",
            "entertainment",
            "other",
        ]

    new_limits: dict[str, float] = {}
    for cat in categories:
        new_limits[cat] = st.number_input(
            cat,
            value=float(current.get(cat, 0) or 0),
            min_value=0.0,
            step=1.0,
            format="%.2f",
            key=f"limit_{mk}_{cat}",
        )

    c1, c2 = st.columns(2)

    # ---- Save ----
    with c1:
        if st.button(
            msgs.get("save", "Save"), type="primary", use_container_width=True
        ):
            before = dict(current)
            all_limits[mk] = new_limits
            save_monthly_limits(all_limits)

            # ---- –ú–∏–Ω–∏-–∞—É–¥–∏—Ç ----
            log = st.session_state.setdefault("audit", [])
            log.append(
                {
                    "ts": datetime.now().isoformat(timespec="seconds"),
                    "kind": "save_form",
                    "month": mk,
                    "before": before,
                    "after": dict(new_limits),
                }
            )

            # ---- Toast + Flash ----
            st.toast(msgs.get("saved", "Saved!"), icon="‚úÖ")
            st.session_state["flash"] = ("success", msgs.get("saved", "Saved!"))
            st.rerun()

    # ==== Clear month limits ====
    with c2:
        if st.button(
            msgs.get("clear_month", "Clear month limits"),
            type="secondary",
            use_container_width=True,
        ):
            before = dict(all_limits.get(mk, {}) or {})
            if mk in all_limits:
                del all_limits[mk]
                save_monthly_limits(all_limits)

            # ---- –ú–∏–Ω–∏-–∞—É–¥–∏—Ç ----
            log = st.session_state.setdefault("audit", [])
            log.append(
                {
                    "ts": datetime.now().isoformat(timespec="seconds"),
                    "kind": "clear_month",
                    "month": mk,
                    "before": before,
                    "after": {},
                }
            )

            # ---- Toast + Flash ----
            st.toast(msgs.get("cleared", "Cleared!"), icon="üßπ")
            st.session_state["flash"] = ("success", msgs.get("cleared", "Cleared!"))
            st.rerun()

    st.divider()

    # ---- Export / Import (CSV) ----
    st.subheader("Export / Import (CSV)")

    # —ç–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã (new_limits)
    csv_bytes = _limits_to_csv_bytes(new_limits)
    st.download_button(
        label="Download CSV",
        data=csv_bytes,
        file_name=f"budget_limits_{mk}.csv",
        mime="text/csv",
        use_container_width=True,
    )

    uploaded = st.file_uploader("Upload limits CSV", type="csv", key="limits_csv")
    if uploaded is not None:
        try:
            imported = _parse_limits_csv(uploaded)  # dict[str, float]
            # –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            known = set(categories)
            imported = {k: float(v) for k, v in imported.items() if k in known}

            before = dict(all_limits.get(mk, {}) or {})
            all_limits[mk] = imported
            save_monthly_limits(all_limits)

            log = st.session_state.setdefault("audit", [])
            log.append(
                {
                    "ts": datetime.now().isoformat(timespec="seconds"),
                    "kind": "import_csv",
                    "month": mk,
                    "before": before,
                    "after": dict(imported),
                }
            )

            st.session_state["flash"] = ("success", msgs.get("saved", "Saved!"))
            st.rerun()
        except Exception as e:
            st.error(f"CSV import failed: {e}")

    # ---- –ñ—É—Ä–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ —Å–µ—Å—Å–∏—é ----
    with st.expander("Change log (session)"):
        log = st.session_state.get("audit", [])
        if not log:
            st.caption("No changes yet.")
        else:
            st.json(log)

    # ---- –î–µ–π—Å—Ç–≤–∏—è —Å –∂—É—Ä–Ω–∞–ª–æ–º ----
    log = _get_audit()
    c1, c2, c3, c4 = st.columns(4)

    with c1:
        st.download_button(
            msgs.get("download_json", "Download JSON"),
            data=_audit_to_json_bytes(log),
            file_name=f"audit_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
            mime="application/json",
            use_container_width=True,
        )

    with c2:
        st.download_button(
            msgs.get("download_csv", "Download CSV"),
            data=_audit_to_csv_bytes(log),
            file_name=f"audit_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv",
            use_container_width=True,
        )

    with c3:
        if st.button(
            msgs.get("save_to_file", "Save to file"),
            use_container_width=True,
            type="secondary",
        ):
            with AUDIT_FILE.open("a", encoding="utf-8") as f:
                f.write(
                    json.dumps(
                        {
                            "ts": datetime.now().isoformat(timespec="seconds"),
                            "kind": "snapshot",
                            "entries": log,
                        },
                        ensure_ascii=False,
                    )
                    + "\n"
                )
            st.success(msgs.get("saved", "Saved!"))
            st.rerun()

    with c4:
        if st.button(msgs.get("clear_audit", "Clear audit"), use_container_width=True):
            st.session_state["audit"] = []
            st.success(msgs.get("cleared", "Cleared!"))
            st.rerun()
