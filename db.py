from __future__ import annotations

import sqlite3
from pathlib import Path
from typing import Any, Dict, List, Optional, Iterable, Union
from os import PathLike

import pandas as pd

from utils import DATA_DIR


# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∑–æ–ª–≤–µ—Ä –ø—É—Ç–∏ –ë–î: —è–≤–Ω—ã–π –ø—É—Ç—å > session_state > –¥–µ—Ñ–æ–ª—Ç ---
def _resolve_db_path(db_path: Optional[str] = None) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ë–î –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ:
    1) —è–≤–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç db_path, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω;
    2) st.session_state['ACTIVE_DB_PATH'] (–µ—Å–ª–∏ streamlit –¥–æ—Å—Ç—É–ø–µ–Ω);
    3) –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'default'.
    """
    if db_path:
        return db_path
    try:
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–ª –∏ –≤–Ω–µ Streamlit (–≤ —Ç–µ—Å—Ç–∞—Ö/—Å–∫—Ä–∏–ø—Ç–∞—Ö)
        import streamlit as st  # type: ignore

        p = st.session_state.get("ACTIVE_DB_PATH")
        if p:
            return str(p)
    except Exception:
        pass
    # –§–æ–ª–±—ç–∫ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è data/)
    return get_db_path("default")


# üîπ –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_db_path(user: str = "default") -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ë–î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_dir = DATA_DIR / user
    user_dir.mkdir(exist_ok=True)
    return str(user_dir / "expenses.db")


# üîπ –ü—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–µ–∑ –ª–æ–≥–∏–Ω–∞)
DB_PATH = get_db_path("default")


# === –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö ===


def ensure_schema(db_path: Optional[str] = None):
    """
    –°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç.
    """
    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏
    path = _resolve_db_path(db_path)

    with sqlite3.connect(path) as conn:
        cur = conn.cursor()
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS expenses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT,
                category TEXT,
                amount REAL,
                description TEXT
            )
            """
        )
        conn.commit()


def get_expenses_df(
    db_path: Optional[str] = None,
    *,
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    category: Optional[str] = None,
) -> pd.DataFrame:
    """–ß–∏—Ç–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É expenses –∫–∞–∫ DataFrame c —Ñ–∏–ª—å—Ç—Ä–∞–º–∏."""
    db_path = _resolve_db_path(db_path)

    where_parts: list[str] = ["WHERE 1=1"]
    params: list[Any] = []
    if start_date:
        where_parts.append("AND date >= ?")
        params.append(start_date)
    if end_date:
        where_parts.append("AND date <= ?")
        params.append(end_date)
    if category:
        where_parts.append("AND category = ?")
        params.append(category)

    sql = f"""
        SELECT date, category, amount, COALESCE(description, '') AS description
        FROM expenses
        {' '.join(where_parts)}
        ORDER BY date
    """
    with sqlite3.connect(db_path) as conn:
        df = pd.read_sql_query(sql, conn, params=params)
    return df


def add_expense(
    *,
    date: str,
    category: str,
    amount: float,
    description: Optional[str] = None,
    db_path: Optional[str] = None,
) -> None:
    db_path = _resolve_db_path(db_path)
    with sqlite3.connect(db_path) as conn:
        conn.execute(
            "INSERT INTO expenses (date, category, amount, description) VALUES (?, ?, ?, ?)",
            (date, category, amount, description or None),
        )
        conn.commit()


def load_expenses(
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    category: Optional[str] = None,
    db_path: Optional[str] = None,
) -> List[Dict]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π (–¥–ª—è –º–µ–Ω—é/–ø–µ—á–∞—Ç–∏).
    –ü—É—Ç—å –∫ –ë–î: —è–≤–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç > session_state > –¥–µ—Ñ–æ–ª—Ç.
    """
    path = _resolve_db_path(db_path)

    df = get_expenses_df(
        db_path=path,
        start_date=start_date,
        end_date=end_date,
        category=category,
    )
    if df is None or df.empty:
        return []

    out: List[Dict] = []
    for r in df.to_dict(orient="records"):
        out.append(
            {
                "date": str(r.get("date", "")),
                "category": str(r.get("category", "")),
                "amount": float(r.get("amount") or 0.0),
                "description": r.get("description") or r.get("note") or None,
            }
        )
    return out


# --- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API (—Ç–æ–Ω–∫–∏–µ –æ–±—ë—Ä—Ç–∫–∏) ---


def get_conn(db_path: Optional[str] = None):
    """
    –°—Ç–∞—Ä–æ–µ –∏–º—è: –≤–µ—Ä–Ω—É—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –ü–µ—Ä–µ–¥ –æ—Ç–¥–∞—á–µ–π –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—É.
    –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äî –±–µ—Ä—ë–º –∞–∫—Ç–∏–≤–Ω—ã–π (—á–µ—Ä–µ–∑ session_state).
    """
    path = _resolve_db_path(db_path)
    ensure_schema(path)
    return sqlite3.connect(path)


def get_all_expenses(
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    category: Optional[str] = None,
    db_path: Optional[str] = None,
):
    """
    –°—Ç–∞—Ä–æ–µ –∏–º—è: –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã (–∫–∞–∫ DataFrame) —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.
    """
    path = _resolve_db_path(db_path)
    return get_expenses_df(
        db_path=path, start_date=start_date, end_date=end_date, category=category
    )


def list_categories(db_path: Optional[str] = None) -> list[str]:
    """
    –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É.
    """
    path = _resolve_db_path(db_path)
    sql = "SELECT DISTINCT category FROM expenses ORDER BY category ASC"
    with sqlite3.connect(path) as conn:
        cur = conn.execute(sql)
        return [str(r[0]) for r in cur.fetchall()]


def migrate_json_to_sqlite(
    json_path: Union[str, PathLike] = "expenses.json",
    db_path: Optional[str] = None,
) -> int:
    """
    –ü–µ—Ä–µ–Ω–æ—Å –∏–∑ JSON –≤ SQLite. –î—É–±–ª–∏–∫–∞—Ç—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.
    –§–æ—Ä–º–∞—Ç JSON: [{date, category, amount, description?}, ...]
    """
    import json

    path = _resolve_db_path(db_path)
    ensure_schema(path)

    try:
        with open(json_path, "r", encoding="utf-8") as f:
            data = json.load(f)
    except FileNotFoundError:
        return 0

    inserted = 0
    with sqlite3.connect(path) as conn:
        cur = conn.cursor()
        cur.execute(
            "CREATE UNIQUE INDEX IF NOT EXISTS idx_expenses_uniq "
            "ON expenses(date, category, amount, COALESCE(description, ''))"
        )
        for row in data:
            date = str(row.get("date", "")).strip()
            category = str(row.get("category", "")).strip()
            try:
                amount = float(row.get("amount", 0) or 0)
            except Exception:
                amount = 0.0
            desc = row.get("description") or row.get("note") or ""

            if not date or not category:
                continue

            try:
                cur.execute(
                    "INSERT OR IGNORE INTO expenses(date, category, amount, description) "
                    "VALUES (?,?,?,?)",
                    (date, category, amount, desc),
                )
                inserted += cur.rowcount
            except Exception:
                # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º—É—Å–æ—Ä–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                pass

        conn.commit()

    return inserted
