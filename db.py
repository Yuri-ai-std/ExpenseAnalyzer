from __future__ import annotations

from pathlib import Path
from typing import Optional, List, Dict, Any
import sqlite3
import pandas as pd

# –ü—É—Ç—å –∫ –ë–î –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DB_PATH = "data/expenses.db"


def ensure_schema(db_path: str = DB_PATH) -> None:
    import sqlite3

    with sqlite3.connect(db_path) as conn:
        cur = conn.cursor()
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS expenses(
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT NOT NULL,
                category TEXT NOT NULL,
                amount REAL NOT NULL,
                description TEXT
            )
        """
        )
        # –∏–Ω–¥–µ–∫—Å(—ã) –æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ
        conn.commit()


def get_expenses_df(
    db_path: Optional[str] = None,
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    category: Optional[str] = None,
) -> pd.DataFrame:
    # –ª–µ–Ω–∏–≤—ã–π –¥–µ—Ñ–æ–ª—Ç
    if db_path is None:
        db_path = DB_PATH

    ensure_schema(db_path)

    where_parts: list[str] = ["WHERE 1=1"]
    params: list[str] = []

    if start_date:
        where_parts.append("AND date >= ?")
        params.append(start_date)
    if end_date:
        where_parts.append("AND date <= ?")
        params.append(end_date)
    if category:
        where_parts.append("AND category = ?")
        params.append(category)

    query = f"""
        SELECT date, category, amount, COALESCE(description, '') AS description
        FROM expenses
        {' '.join(where_parts)}
        ORDER BY date
    """

    with sqlite3.connect(db_path) as conn:
        return pd.read_sql_query(
            query,
            conn,
            params=tuple(params),  # üëà –∫–æ—Ä—Ç–µ–∂ –≤–º–µ—Å—Ç–æ list
        )


def load_expenses(
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    category: Optional[str] = None,
) -> List[Dict]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –º–µ–Ω—é/–ø–µ—á–∞—Ç–∏.
    """
    # –µ—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –≤–Ω—É—Ç—Ä–∏ get_expenses_df ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∫–∏–Ω—å—Ç–µ
    df = get_expenses_df(start_date=start_date, end_date=end_date, category=category)
    if df is None or df.empty:
        return []
    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–ª—é—á–∏
    out = []
    for r in df.to_dict(orient="records"):
        out.append(
            {
                "date": str(r.get("date", "")),
                "category": str(r.get("category", "")),
                "amount": float(r.get("amount") or 0.0),
                "description": r.get("description") or r.get("note") or None,
            }
        )
    return out


def add_expense(
    date: str,
    category: str,
    amount: float,
    description: Optional[str] = None,
    db_path: Optional[str] = None,
) -> None:
    if db_path is None:
        db_path = DB_PATH

    with sqlite3.connect(db_path) as conn:
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO expenses(date, category, amount, description) VALUES (?, ?, ?, ?)",
            (date, category, float(amount), description),
        )
        conn.commit()


# --- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API (—Ç–æ–Ω–∫–∏–µ –æ–±—ë—Ä—Ç–∫–∏) ---


def get_conn(db_path: str = DB_PATH):
    """
    –°—Ç–∞—Ä–æ–µ –∏–º—è: –≤–µ—Ä–Ω—É—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –ü–µ—Ä–µ–¥ –æ—Ç–¥–∞—á–µ–π –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—É.
    """
    ensure_schema(db_path)
    return sqlite3.connect(db_path)


def get_all_expenses(
    start_date: str | None = None,
    end_date: str | None = None,
    category: str | None = None,
    db_path: str = DB_PATH,
):
    """
    –°—Ç–∞—Ä–æ–µ –∏–º—è: –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã (–∫–∞–∫ DataFrame) —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.
    """
    return get_expenses_df(
        db_path=db_path, start_date=start_date, end_date=end_date, category=category
    )


def list_categories() -> list[str]:
    """
    –í–µ—Ä–Ω—ë—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î.
    """
    import sqlite3

    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("SELECT DISTINCT category FROM expenses ORDER BY category ASC")
        return [r[0] for r in cur.fetchall() if r and r[0]]


def migrate_json_to_sqlite(
    json_path: str = "expenses.json",
    db_path: str = DB_PATH,
) -> int:
    """
    –ü–µ—Ä–µ–Ω–æ—Å –∏–∑ JSON –≤ SQLite. –î—É–±–ª–∏–∫–∞—Ç—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ —Ä–µ–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.
    –§–æ—Ä–º–∞—Ç JSON: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏ date, category, amount, description (–æ–ø—Ü.).
    """
    import json

    ensure_schema(db_path)

    try:
        with open(json_path, "r", encoding="utf-8") as f:
            data = json.load(f)
    except FileNotFoundError:
        return 0

    inserted = 0
    with sqlite3.connect(db_path) as conn:
        cur = conn.cursor()
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äì —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        cur.execute(
            "CREATE UNIQUE INDEX IF NOT EXISTS idx_expenses_uniq "
            "ON expenses(date, category, amount, COALESCE(description, ''))"
        )
        for row in data:
            date = str(row.get("date", "")).strip()
            category = str(row.get("category", "")).strip()
            # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º —Å—É–º–º—É
            try:
                amount = float(row.get("amount", 0) or 0)
            except Exception:
                amount = 0.0
            desc = row.get("description") or row.get("note") or ""

            if not date or not category:
                continue

            try:
                cur.execute(
                    "INSERT OR IGNORE INTO expenses(date, category, amount, description) VALUES (?,?,?,?)",
                    (date, category, amount, desc),
                )
                inserted += cur.rowcount  # –±—É–¥–µ—Ç 1 –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –≤—Å—Ç–∞–≤–∏–ª–∏, 0 –µ—Å–ª–∏ –¥—É–±–ª—å
            except Exception:
                # –Ω–µ –ø–∞–¥–∞–µ–º –Ω–∞ –º—É—Å–æ—Ä–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
                pass

        conn.commit()

    return inserted
